(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{488:function(t,n,a){"use strict";a.r(n);var e=a(70),r=Object(e.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法"}},[t._v("#")]),t._v(" 算法")]),t._v(" "),a("h3",{attrs:{id:"冒泡排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序"}},[t._v("#")]),t._v(" 冒泡排序")]),t._v(" "),a("p",[t._v("const {length} = arr  ===   length = arr.length")]),t._v(" "),a("p",[t._v("普通版")]),t._v(" "),a("p",[t._v("let j=0;j<length-1   不减去i")]),t._v(" "),a("p",[t._v("改进版")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function sort (arr) {\n    const {length} = arr\n    for (let i=0;i<length-1;i++){\n        for (let j=0;j<length-1-i;j++) {\n            if (arr[j] > arr[j+1]) {\n                [arr[j], arr[j+1]] = [arr[j+1], arr[j]]\n            }\n        }\n    }\n    return arr\n}\nlet arr=[1,4,65,2,67,3,8,22,6]\nconsole.log(sort(arr))\n")])])]),a("h3",{attrs:{id:"选择排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#选择排序"}},[t._v("#")]),t._v(" 选择排序")]),t._v(" "),a("p",[t._v("找到最小的那个与当前的交换")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function selectionSort (arr) {\n    const {length} = arr\n    let indexMin\n    for (let i=0;i<length-1;i++){\n        indexMin = i\n        for (let j=i;j<length;j++) {\n            if (arr[indexMin] > arr[j]) {\n                indexMin = j\n            }\n        }\n        if (i !== indexMin) {\n            [arr[indexMin], arr[i]] = [arr[i], arr[indexMin]]\n        }\n    }\n    return arr\n}\nlet arr=[1,4,65,2,67,3,8,22,6]\nconsole.log(selectionSort(arr))\n")])])]),a("h3",{attrs:{id:"插入排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入排序"}},[t._v("#")]),t._v(" 插入排序")]),t._v(" "),a("p",[t._v("找到之前比本次小的，插到后面")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function sort (arr) {\n    const {length} = arr\n    let temp\n    for (let i=1;i<length;i++){\n        let j = i\n        temp = arr[i]\n        while (j>0 && arr[j-1] > temp) {\n            arr[j] = arr[j-1]\n            j--\n        }\n        arr[j] = temp\n    }\n    return arr\n}\nlet arr=[1,4,65,2,67,3,8,22,6]\nconsole.log(sort(arr))\n")])])]),a("h3",{attrs:{id:"归并排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#归并排序"}},[t._v("#")]),t._v(" 归并排序")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Array.prototype.mergeSort = function() {\n  const rec = (arr) => {\n    if (arr.length === 1) return arr\n    const mid = Math.floor(arr.length / 2)\n    const left = arr.slice(0, mid)\n    const right = arr.slice(mid, arr.length)\n    const orderLeft = rec(left)\n    const orderRight = rec(right)\n    const res = []\n    while(orderLeft.length || orderRight.length) {\n      if (orderLeft.length && orderRight.length) {\n        res.push(orderLeft[0] < orderRight[0] ? orderLeft.shift() : orderRight.shift())\n      } else if (orderLeft.length) {\n        res.push(orderLeft.shift())\n      } else if (orderRight.length) {\n        res.push(orderRight.shift())\n      }\n    }\n    return res\n  }\n  rec(this)\n}\nconst arr = [7,3,5,1]\narr.mergeSort()\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function mergeSort (arr) {\n  const {length} = arr\n  if (length === 1) return arr\n  const mid = Math.floor(length / 2)\n  const left = arr.slice(0, mid)\n  const right = arr.slice(mid, length)\n  const orderLeft = mergeSort(left)\n  const orderRight = mergeSort(right)\n  let res = []\n  while (orderLeft.length > 0 || orderRight.length > 0) {\n    if (orderLeft.length > 0 && orderRight.length > 0) {\n      res.push(orderLeft[0] < orderRight[0] ? orderLeft.shift() : orderRight.shift())\n    } else if (orderRight.length) {\n      res.push(orderRight.shift())\n    } else if (orderLeft.length) {\n      res.push(orderLeft.shift())\n    }\n  }\n  return res\n}\n")])])]),a("h3",{attrs:{id:"快排"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快排"}},[t._v("#")]),t._v(" 快排")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Array.prototype.quickSort = function() {\n  const rec = (arr) => {\n    if (arr.length === 0 || arr.length === 1) return arr\n    const mid = arr[0]\n    const left = []\n    const right = []\n    for (let i = 1; i< arr.length; i++) {\n      if (arr[i] <mid) {\n        left.push(arr[i])\n      } else {\n        right.push(arr[i])\n      }\n    }\n    return [...rec(left), mid, ...rec(right)]\n    \n  }\n  const res = rec(this)\n  res.forEach((n, i) => this[i] = n)\n}\nconst arr = [7,3,5,1]\narr.quickSort()\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function quickSort(arr) {\n  const {length} = arr\n  if ([0, 1].includes(length)) return arr\n  let mid = arr[0]\n  let left = []\n  let right = []\n  for (let i = 1; i < length; i++) {\n    if (arr[i] < mid) {\n      left.push(arr[i])\n    } else {\n      right.push(arr[i])\n    }\n  }\n  return [...quickSort(left), mid, ...quickSort(right)]\n}\n")])])]),a("h3",{attrs:{id:"斐波那契"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#斐波那契"}},[t._v("#")]),t._v(" 斐波那契")]),t._v(" "),a("h4",{attrs:{id:"方法一-普通递归"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法一-普通递归"}},[t._v("#")]),t._v(" 方法一：普通递归")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fibonacci")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("includes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fibonacci")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fibonacci")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nf"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1901.197998046875")]),t._v(" ms\n")])])]),a("p",[t._v("缺点：存在重复计算，容易爆栈")]),t._v(" "),a("h4",{attrs:{id:"方法二-改进递归-作为函数参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法二-改进递归-作为函数参数"}},[t._v("#")]),t._v(" 方法二：改进递归，作为函数参数")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function fibonacci(n) {\n\tfunction fib(n, v1, v2) {\n\t\tif (n === 1) {\n\t\t\treturn v1\n\t\t} else if (n === 2) {\n\t\t\treturn v2\n\t\t} else {\n\t\t\treturn fib(n - 1, v2, v1 + v2)\n\t\t}\n\t} \n\treturn fib(n, 1, 1)\n}\n\nf: 7.71484375 ms\n")])])]),a("h4",{attrs:{id:"方法三-改进递归-用数组记录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法三-改进递归-用数组记录"}},[t._v("#")]),t._v(" 方法三：改进递归，用数组记录")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function fibonacci(n) {\n\tlet memo = [0, 1]\n\tfunction fib(n) {\n\t\tif (memo[n] === undefined) {\n\t\t\tmemo[n] = fib(n - 1) + fib(n - 2)\n\t\t}\n\t\treturn memo[n]\n\t}\n\treturn fib(n)\n}\n\nf: 14.156005859375 ms\n")])])]),a("h4",{attrs:{id:"方法四-for循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法四-for循环"}},[t._v("#")]),t._v(" 方法四： for循环")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function fibonacci(n) {\n\tlet n1 = 1, n2 = 1\n\tfor (let i = 2; i < n; i++) {\n\t\t[n1, n2] = [n2, n1 + n2]\n\t}\n\treturn n2\n}\n\nf: 5.817138671875 ms\n")])])]),a("h4",{attrs:{id:"运行耗时"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行耗时"}},[t._v("#")]),t._v(" 运行耗时")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("let x = 1\nconsole.time('f') \nwhile (x < 10000) {\n    fibonacci(20)\n    x++\n}\nconsole.timeEnd('f') \n")])])]),a("p",[t._v("普通递归>改进递归>for循环")]),t._v(" "),a("h3",{attrs:{id:"_1-五大算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-五大算法"}},[t._v("#")]),t._v(" 1. 五大算法")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("贪心算法")]),t._v(": 局部最优解法")]),t._v(" "),a("li",[a("strong",[t._v("分治算法")]),t._v(": 分成多个小模块，与原问题性质相同")]),t._v(" "),a("li",[a("strong",[t._v("动态规划")]),t._v(": 每个状态都是过去历史的一个总结")]),t._v(" "),a("li",[a("strong",[t._v("回溯法")]),t._v(": 发现原先选择不优时，退回重新选择")]),t._v(" "),a("li",[a("strong",[t._v("分支限界法")])])]),t._v(" "),a("h3",{attrs:{id:"_2-基础排序算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-基础排序算法"}},[t._v("#")]),t._v(" 2. 基础排序算法")]),t._v(" "),a("ul",[a("li",[t._v("冒泡排序: 两两比较")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\tfunction bubleSort(arr) {\n\t    var len = arr.length;\n\t    for (let outer = len ; outer >= 2; outer--) {\n\t        for(let inner = 0; inner <=outer - 1; inner++) {\n\t            if(arr[inner] > arr[inner + 1]) {\n\t                [arr[inner],arr[inner+1]] = [arr[inner+1],arr[inner]]\n\t            }\n\t        }\n\t    }\n\t    return arr;\n\t}\n复制代码\n")])])]),a("ul",[a("li",[t._v("选择排序: 遍历自身以后的元素，最小的元素跟自己调换位置")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function selectSort(arr) {\n    var len = arr.length;\n    for(let i = 0 ;i < len - 1; i++) {\n        for(let j = i ; j<len; j++) {\n            if(arr[j] < arr[i]) {\n                [arr[i],arr[j]] = [arr[j],arr[i]];\n            }\n        }\n    }\n    return arr\n}\n复制代码\n")])])]),a("ul",[a("li",[t._v("插入排序: 即将元素插入到已排序好的数组中")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function insertSort(arr) {\n    for(let i = 1; i < arr.length; i++) {  //外循环从1开始，默认arr[0]是有序段\n        for(let j = i; j > 0; j--) {  //j = i,将arr[j]依次插入有序段中\n            if(arr[j] < arr[j-1]) {\n                [arr[j],arr[j-1]] = [arr[j-1],arr[j]];\n            } else {\n                break;\n            }\n        }\n    }\n    return arr;\n}\n复制代码\n")])])]),a("h3",{attrs:{id:"_3-高级排序算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-高级排序算法"}},[t._v("#")]),t._v(" 3. 高级排序算法")]),t._v(" "),a("ul",[a("li",[t._v("快速排序\n"),a("ul",[a("li",[t._v("选择基准值(base)，原数组长度减一(基准值)，使用 splice")]),t._v(" "),a("li",[t._v("循环原数组，小的放左边(left数组)，大的放右边(right数组);")]),t._v(" "),a("li",[t._v("concat(left, base, right)")]),t._v(" "),a("li",[t._v("递归继续排序 left 与 right")])])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function quickSort(arr) {\n    if(arr.length <= 1) {\n        return arr;  //递归出口\n    }\n    var left = [],\n        right = [],\n        current = arr.splice(0,1); \n    for(let i = 0; i < arr.length; i++) {\n        if(arr[i] < current) {\n            left.push(arr[i])  //放在左边\n        } else {\n            right.push(arr[i]) //放在右边\n        }\n    }\n    return quickSort(left).concat(current,quickSort(right));\n}\n复制代码\n")])])]),a("ul",[a("li",[t._v("希尔排序：不定步数的插入排序，插入排序")]),t._v(" "),a("li",[t._v("口诀: 插冒归基稳定，快选堆希不稳定")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/2/14/168e9d8524a2b947?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),a("p",[t._v("稳定性： 同大小情况下是否可能会被交换位置, 虚拟dom的diff，不稳定性会导致重新渲染；")]),t._v(" "),a("h3",{attrs:{id:"_4-递归运用-斐波那契数列-爬楼梯问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-递归运用-斐波那契数列-爬楼梯问题"}},[t._v("#")]),t._v(" 4. 递归运用(斐波那契数列)： 爬楼梯问题")]),t._v(" "),a("p",[t._v("初始在第一级，到第一级有1种方法(s(1) = 1)，到第二级也只有一种方法(s(2) = 1)， 第三级(s(3) = s(1) + s(2))")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function cStairs(n) {\n    if(n === 1 || n === 2) {\n        return 1;\n    } else {\n        return cStairs(n-1) + cStairs(n-2)\n    }\n}\n复制代码\n")])])]),a("h3",{attrs:{id:"_5-数据树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-数据树"}},[t._v("#")]),t._v(" 5. 数据树")]),t._v(" "),a("ul",[a("li",[t._v("二叉树: 最多只有两个子节点\n"),a("ul",[a("li",[t._v("完全二叉树")]),t._v(" "),a("li",[t._v("满二叉树\n"),a("ul",[a("li",[t._v("深度为 h, 有 n 个节点，且满足 n = 2^h - 1")])])])])]),t._v(" "),a("li",[t._v("二叉查找树: 是一种特殊的二叉树，能有效地提高查找效率\n"),a("ul",[a("li",[t._v("小值在左，大值在右")]),t._v(" "),a("li",[t._v("节点 n 的所有左子树值小于 n，所有右子树值大于 n")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/2/14/168e9d89406fa6a8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),a("ul",[a("li",[t._v("遍历节点\n"),a("ul",[a("li",[t._v("前序遍历\n"),a("ul",[a("li",[a("ol",[a("li",[t._v("根节点")])])]),t._v(" "),a("li",[a("ol",[a("li",[t._v("访问左子节点，回到 1")])])]),t._v(" "),a("li",[a("ol",[a("li",[t._v("访问右子节点，回到 1")])])])])]),t._v(" "),a("li",[t._v("中序遍历\n"),a("ul",[a("li",[a("ol",[a("li",[t._v("先访问到最左的子节点")])])]),t._v(" "),a("li",[a("ol",[a("li",[t._v("访问该节点的父节点")])])]),t._v(" "),a("li",[a("ol",[a("li",[t._v("访问该父节点的右子节点， 回到 1")])])])])]),t._v(" "),a("li",[t._v("后序遍历\n"),a("ul",[a("li",[a("ol",[a("li",[t._v("先访问到最左的子节点")])])]),t._v(" "),a("li",[a("ol",[a("li",[t._v("访问相邻的右节点")])])]),t._v(" "),a("li",[a("ol",[a("li",[t._v("访问父节点， 回到 1")])])])])])])]),t._v(" "),a("li",[t._v("插入与删除节点")])]),t._v(" "),a("h3",{attrs:{id:"_6-天平找次品"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-天平找次品"}},[t._v("#")]),t._v(" 6. 天平找次品")]),t._v(" "),a("p",[t._v("有n个硬币，其中1个为假币，假币重量较轻，你有一把天平，请问，至少需要称多少次能保证一定找到假币?")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("三等分算法:")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("将硬币分成3组，随便取其中两组天平称量")])]),t._v(" "),a("ul",[a("li",[t._v("平衡，假币在未上称的一组，取其回到 1 继续循环")]),t._v(" "),a("li",[t._v("不平衡，假币在天平上较轻的一组， 取其回到 1 继续循环")])])])])])]),t._v(" "),a("h2",{attrs:{id:"算法训练营"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法训练营"}},[t._v("#")]),t._v(" 算法训练营")]),t._v(" "),a("h3",{attrs:{id:"开篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开篇"}},[t._v("#")]),t._v(" 开篇")]),t._v(" "),a("ol",[a("li",[t._v("刻意练习")]),t._v(" "),a("li",[t._v("想到解法后需要再想更优解")]),t._v(" "),a("li",[t._v("做自己的脑图，形成树形知识")])]),t._v(" "),a("h3",{attrs:{id:"code-style"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#code-style"}},[t._v("#")]),t._v(" code style")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("多google")])]),t._v(" "),a("li",[a("p",[t._v("自顶向下的编程方式：")]),t._v(" "),a("p",[t._v("先将主干逻辑步骤写好（方法名），再补充具体代码")])]),t._v(" "),a("li",[a("p",[t._v("用新的window terminal")])]),t._v(" "),a("li",[a("p",[t._v("vscode leetcode plugin")]),t._v(" "),a("p",[t._v("每道题多看国际站前三解法")])])]),t._v(" "),a("h3",{attrs:{id:"时间空间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间空间复杂度"}},[t._v("#")]),t._v(" 时间空间复杂度")]),t._v(" "),a("p",[t._v("O(log(n))")]),t._v(" "),a("p",[t._v("O(1)")]),t._v(" "),a("p",[t._v("O(n)")]),t._v(" "),a("p",[t._v("O(2^n)")]),t._v(" "),a("p",[t._v("...")]),t._v(" "),a("h3",{attrs:{id:"数组、链表、跳表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组、链表、跳表"}},[t._v("#")]),t._v(" 数组、链表、跳表")]),t._v(" "),a("p",[t._v("数组读取是O(1)，插入O(n)")]),t._v(" "),a("p",[t._v("链表读取是O(n)，插入O(1)")]),t._v(" "),a("p",[t._v("跳表就是优化了链表，加多层索引，将复杂度降到O(log2(n))")]),t._v(" "),a("p",[t._v("空间换时间，升维")]),t._v(" "),a("h2",{attrs:{id:"leetcode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#leetcode"}},[t._v("#")]),t._v(" leetcode")]),t._v(" "),a("h3",{attrs:{id:"两数之和"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两数之和"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://leetcode-cn.com/problems/two-sum/",target:"_blank",rel:"noopener noreferrer"}},[t._v("两数之和"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("用map记录，循环找差")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var twoSum = function(nums, target) {\n    const map = new Map()\n    for (let i = 0;i < nums.length; i++) {\n      const item = nums[i]\n      const val = target - item\n      if (map.has(val)) {\n        return [i, map.get(val)]\n      } else {\n        map.set(item, i)\n      }\n    }\n};\n")])])]),a("h3",{attrs:{id:"两数相加"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两数相加"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://leetcode-cn.com/problems/add-two-numbers/",target:"_blank",rel:"noopener noreferrer"}},[t._v("两数相加"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("链表头相加")]),t._v(" "),a("p",[t._v("计算进位")]),t._v(" "),a("p",[t._v("然后链表往后走，一直加")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var addTwoNumbers = function(l1, l2) {\n  const l3 = new ListNode(0)\n  let p1 = l1\n  let p2 = l2\n  let p3 = l3\n  let carry = 0\n  while (p1 || p2) {\n    const val1 = p1 ? p1.val : 0\n    const val2 = p2 ? p2.val : 0\n    const val = val1 + val2 + carry\n    carry = Math.floor(val / 10)\n    p3.next = new ListNode(val % 10)\n    if (p1) p1 = p1.next\n    if (p2) p2 = p2.next\n    p3 = p3.next\n  }\n  if (carry) {\n    p3.next = new ListNode(carry)\n  }\n  return l3.next\n};\n")])])]),a("p",[t._v("或者直接链表转数字，加完再转成链表")]),t._v(" "),a("h3",{attrs:{id:"无重复字符的最长子串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#无重复字符的最长子串"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/",target:"_blank",rel:"noopener noreferrer"}},[t._v("无重复字符的最长子串"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("左指针，循环里右指针，如果map里有，移动左指针，计算最大值，更新索引")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var lengthOfLongestSubstring = function(s) {\n  let l = 0\n  let res = 0\n  const map = new Map()\n  for (let i = 0; i < s.length; i++) {\n    if (map.has(s[i]) && map.get(s[i]) >= l) {\n      l = map.get(s[i]) + 1\n    }\n    res = Math.max(res, i - l + 1)\n    map.set(s[i], i)\n  }\n  return res\n};\n")])])]),a("h3",{attrs:{id:"盛最多水的容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#盛最多水的容器"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://leetcode-cn.com/problems/container-with-most-water/",target:"_blank",rel:"noopener noreferrer"}},[t._v("盛最多水的容器"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("左右指针，找出对应的最小高度，并移动对应指针")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var maxArea = function(a) {\n  let max = 0\n  let l = 0\n  let r = a.length - 1\n  while(l < r) {\n    const minHeight = a[l] <= a[r] ? a[l++] : a[r--]\n    let area = minHeight * (r - l + 1)\n    max = Math.max(area, max)\n  }\n  return max\n};\n")])])]),a("h3",{attrs:{id:"三数之和"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三数之和"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://leetcode-cn.com/problems/3sum/",target:"_blank",rel:"noopener noreferrer"}},[t._v("三数之和"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("数组升序排序")]),t._v(" "),a("p",[t._v("如果整个数组都是同符号则肯定没结果")]),t._v(" "),a("p",[t._v("从第一个开始循环")]),t._v(" "),a("p",[t._v("如果第一个大于0也没戏")]),t._v(" "),a("p",[t._v("搞两个指针，当前+1 和 最后")]),t._v(" "),a("p",[t._v("当左小于右时")]),t._v(" "),a("p",[t._v("当当前和右同符号也没戏")]),t._v(" "),a("p",[t._v("三个相加")]),t._v(" "),a("p",[t._v("等于0就记录")]),t._v(" "),a("p",[t._v("小于0说明左边大，左边一直加，相等则再加")]),t._v(" "),a("p",[t._v("右边同理")]),t._v(" "),a("p",[t._v("找完移动当前，相同的再加1")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var threeSum = function (nums) {\n  let res = []\n  let length = nums.length;\n  nums.sort((a, b) => a - b) // 先排个队，最左边是最弱（小）的，最右边是最强(大)的\n  if (nums[0] <= 0 && nums[length - 1] >= 0) { // 优化1: 整个数组同符号，则无解\n    for (let i = 0; i < length - 2;) {\n      if (nums[i] > 0) break; // 优化2: 最左值为正数则一定无解\n      let first = i + 1\n      let last = length - 1\n      do {\n        if (first >= last || nums[i] * nums[last] > 0) break // 两人选相遇，或者三人同符号，则退出\n        let result = nums[i] + nums[first] + nums[last]\n        if (result === 0) { // 如果可以组队\n          res.push([nums[i], nums[first], nums[last]])\n        }\n        if (result <= 0 ) { // 实力太弱，把菜鸟那边右移一位\n          while (first < last && nums[first] === nums[++first]){} // 如果相等就跳过\n        } else { // 实力太强，把大神那边左移一位\n          while (first < last && nums[last] === nums[--last]) {}\n        }\n      } while (first < last)\n      while (nums[i] === nums[++i]) {}      // 跳过相同的\n    }\n  }\n  return res\n}\n")])])]),a("p",[t._v("不然就暴力三重循环")]),t._v(" "),a("h3",{attrs:{id:"有效的括号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有效的括号"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://leetcode-cn.com/problems/valid-parentheses/",target:"_blank",rel:"noopener noreferrer"}},[t._v("有效的括号"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("用栈解决")]),t._v(" "),a("p",[t._v("是左边的推入")]),t._v(" "),a("p",[t._v("不是就看栈顶是不是等于对应的左边")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var isValid = function(s) {\n  if (s.length % 2 === 1) return false\n  const map = {\n    '(': ')',\n    '{': '}',\n    '[': ']'\n  }\n\n  let stack = []\n  for (let i =0;i<s.length;i++) {\n    if (map.hasOwnProperty(s[i])) {\n      stack.push(map[s[i]])\n    } else if (stack[stack.length - 1] === s[i]) {\n      stack.pop()\n    } else {\n      return false\n    }\n  }\n  return stack.length === 0\n};\n")])])]),a("h3",{attrs:{id:"合并两个有序链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合并两个有序链表"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://leetcode-cn.com/problems/merge-two-sorted-lists/",target:"_blank",rel:"noopener noreferrer"}},[t._v("合并两个有序链表"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("同时存在时判断小的，走小的")]),t._v(" "),a("p",[t._v("不然谁存在走谁")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var mergeTwoLists = function(l1, l2) {\n  const res = new ListNode(0)\n  let p = res\n  let p1 = l1\n  let p2 = l2\n  while(p1 && p2) {\n    if (p1.val < p2.val) {\n      p.next = p1\n      p1=  p1.next\n    } else {\n      p.next = p2\n      p2= p2.next\n    }\n    p = p.next\n  }\n  if (p1) {\n    p.next = p1\n  }\n  if (p2) {\n    p.next = p2\n  }\n  return res.next\n};\n")])])]),a("h3",{attrs:{id:"合并k个升序链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合并k个升序链表"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://leetcode-cn.com/problems/merge-k-sorted-lists/",target:"_blank",rel:"noopener noreferrer"}},[t._v("合并K个升序链表"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("用最小堆来解决")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("class MinHeap {\n  constructor () {\n    this.heap = []\n  }\n  swap (i1, i2) {\n    [this.heap[i1], this.heap[i2]] = [this.heap[i2], this.heap[i1]]\n  }\n  getLeftIndex (i) {\n    return i * 2 + 1\n  }\n  getRightIndex (i) {\n    return i * 2 + 2\n  }\n  getParentIndex(i) {\n    return (i - 1) >> 1\n  }\n  shiftUp (index) {\n    if (index === 0) return\n    const parentIndex = this.getParentIndex(index)\n    if (this.heap[parentIndex] && this.heap[parentIndex].val > this.heap[index].val) {\n      this.swap(parentIndex, index)\n      this.shiftUp(parentIndex)\n    }\n  }\n  shiftDown (index) {\n    const leftIndex = this.getLeftIndex(index)\n    const rightIndex = this.getRightIndex(index)\n    if (this.heap[leftIndex] && this.heap[leftIndex].val < this.heap[index].val) {\n      this.swap(leftIndex, index)\n      this.shiftDown(leftIndex)\n    }\n    if (this.heap[rightIndex] && this.heap[rightIndex].val < this.heap[index].val) {\n      this.swap(rightIndex, index)\n      this.shiftDown(rightIndex)\n    }\n  }\n  insert(value) {\n    this.heap.push(value)\n    this.shiftUp(this.heap.length - 1)\n  }\n  pop() {\n    if (this.size() === 1) return this.heap.shift()\n    const top = this.heap[0]\n    this.heap[0] = this.heap.pop()\n    this.shiftDown(0)\n    return top\n  }\n  peek() {\n    return this.heap[0]\n  }\n  size() {\n    return this.heap.length\n  }\n}\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode[]} lists\n * @return {ListNode}\n */\nvar mergeKLists = function(lists) {\n  const res = new ListNode(0)\n  let p = res\n  const h = new MinHeap()\n  lists.forEach(n => {\n    n && h.insert(n)\n  })\n  while(h.size()) {\n    const n = h.pop()\n    p.next = n;\n    p = p.next;\n    if (n.next) h.insert(n.next)\n  }\n  return res.next\n};\n")])])]),a("h3",{attrs:{id:"全排列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全排列"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://leetcode-cn.com/problems/permutations/",target:"_blank",rel:"noopener noreferrer"}},[t._v("全排列"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("递归实现")]),t._v(" "),a("p",[t._v("每个数字都循环，不存在就推入，长度等于给定就停止")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var permute = function(nums) {\n  const res = []\n  const backTrack = (path) => {\n    if (path.length === nums.length) {\n      res.push(path)\n      return\n    }\n    nums.forEach(item => {\n      if (path.includes(item)) return\n      backTrack(path.concat(item))\n    })\n  }\n  backTrack([])\n  return res\n};\n")])])]),a("h3",{attrs:{id:"有效数字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有效数字"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://leetcode-cn.com/problems/valid-number/",target:"_blank",rel:"noopener noreferrer"}},[t._v("有效数字"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("用图来做，把可能的走向列出来，循环去走，走的通就是有效的")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("/**\n * @param {string} s\n * @return {boolean}\n */\nvar isNumber = function(s) {\n  const graph = {\n    0: {'blank': 0, 'sign': 1, '.': 2, 'digit': 6},\n    1: {'digit': 6, '.': 2},\n    2: {'digit': 3},\n    3: {'digit': 3, 'e': 4},\n    4: {'digit': 5, 'sign': 7},\n    5: {'digit': 5},\n    6: {'digit': 6, '.': 3, 'e': 4},\n    7: {'digit': 5}\n  }\n\n  let state = 0\n  for (c of s.trim()) {\n    if (c >= '0' && c <= '9') {\n      c = 'digit'\n    } else if (c === ' ') {\n      c = 'blank'\n    } else if (c === '+' || c === '-') {\n      c = 'sign'\n    }\n    state = graph[state][c]\n    if (state === undefined) {\n      return false\n    }\n  }\n  if (state === 3 || state === 5 || state === 6) {\n    return true\n  }\n  return false\n};\n")])])]),a("h3",{attrs:{id:"爬楼梯"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#爬楼梯"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://leetcode-cn.com/problems/climbing-stairs/",target:"_blank",rel:"noopener noreferrer"}},[t._v("爬楼梯"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("用数学公式")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var climbStairs = function(n) {\n    const sqrt_5 = Math.sqrt(5);\n    const fib_n = Math.pow((1 + sqrt_5) / 2, n + 1) - Math.pow((1 - sqrt_5) / 2,n + 1);\n    return Math.round(fib_n / sqrt_5);\n};\n")])])]),a("p",[t._v("用斐波那契")]),t._v(" "),a("p",[t._v("用个数组缓存")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var climbStairs = function(n) {\n    const dp = [1， 1];\n    for(let i = 2; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2];\n    }\n    return dp[n];\n};\n")])])]),a("p",[t._v("或者")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function fibonacci(n) {\n\tlet n1 = 1, n2 = 1\n\tfor (let i = 2; i < n; i++) {\n\t\t[n1, n2] = [n2, n1 + n2]\n\t}\n\treturn n2\n}\n")])])]),a("h3",{attrs:{id:"反转字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反转字符串"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://leetcode-cn.com/problems/reverse-string/",target:"_blank",rel:"noopener noreferrer"}},[t._v("反转字符串"),a("OutboundLink")],1)]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var reverseString = function(s) {\n  let start = 0, end = s.length - 1\n  while (start < end) {\n    [s[start], s[end]] = [s[end], s[start]]\n    start++;\n    end--;\n  }\n};\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 递归版\nvar reverseString = function(s) {\n  const reverse = (left, right) => {\n    if (left >= right) return\n    [s[left], s[right]] = [s[right], s[left]];\n    reverse(++left, --right)\n  }\n  reverse(0, s.length - 1)\n};\n")])])]),a("h2",{attrs:{id:"other"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#other"}},[t._v("#")]),t._v(" other")]),t._v(" "),a("h3",{attrs:{id:"倒水问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#倒水问题"}},[t._v("#")]),t._v(" 倒水问题")]),t._v(" "),a("p",[t._v("9l 4l 6l")]),t._v(" "),a("p",[t._v("得出x%9=6")]),t._v(" "),a("p",[t._v("找出x能整除4即可知道4往9倒多少次能得到6")]),t._v(" "),a("h3",{attrs:{id:"非负整数组-拼出最大值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非负整数组-拼出最大值"}},[t._v("#")]),t._v(" 非负整数组，拼出最大值")]),t._v(" "),a("p",[t._v("冒泡排序，比较当前值拼上前一个值的数是否大于前一个值的数拼上当前值")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function findMaxNum (str) {\n  for (let i = 0; i < str.length; i++) {\n    for (let j = str.length - 1; j > i; j--) {\n      if (str[j] + '' + str[j-1] > str[j-1] + '' + str[j]) {\n        [str[j], str[j - 1]] = [str[j-1], str[j]]\n      }\n    }\n  }\n  return str.join('')\n}\nconsole.log(findMaxNum([10,50,54,45,9,7,8,5,5,4,44,46,456]))\n")])])]),a("h3",{attrs:{id:"去掉字符串中的空格并输出空格数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#去掉字符串中的空格并输出空格数"}},[t._v("#")]),t._v(" 去掉字符串中的空格并输出空格数")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function empty (str) {\n  let num = 0\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i]\n    if (char === ' ') {\n      str = str.substring(0, i) + str.substring(i + 1, str.length)\n      i--\n      num++\n    }\n  }\n  return {\n    str,\n    num\n  }\n}\nconsole.log(empty('s t t   x'))\n")])])]),a("h3",{attrs:{id:"猴子吃桃"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#猴子吃桃"}},[t._v("#")]),t._v(" 猴子吃桃")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function monkey (n) {\n  let nums = 1\n  for (let i = n; i > 0; i--) {\n    nums = (nums + 1 ) * 2\n  }\n  console.log(nums)\n}\nmonkey(9)\n")])])]),a("h3",{attrs:{id:"洗牌"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#洗牌"}},[t._v("#")]),t._v(" 洗牌")]),t._v(" "),a("p",[t._v("一：简单版")]),t._v(" "),a("p",[t._v("缺点 改变原数组 且时间复杂度为O(n2)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function shuffle(arr) {\n  let random, result = []\n  while (arr.length) {\n    random = Math.floor(Math.random() * arr.length)\n    result.push(...arr.splice(random, 1))\n  }\n  return result\n}\n")])])]),a("p",[t._v("二：随机取前面一个与递减的最后一个交换")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function shuffle(arr) {\n  let random, n = arr.length\n  while (n > 0) {\n    random = Math.floor(Math.random() * n--)\n    let temp = arr[n]\n    arr[n] = arr[random]\n    arr[random] = temp\n  }\n  return arr\n}\n")])])]),a("h3",{attrs:{id:"寻找数组中-该元素大于左侧的所值-小于右侧的所有值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#寻找数组中-该元素大于左侧的所值-小于右侧的所有值"}},[t._v("#")]),t._v(" 寻找数组中，该元素大于左侧的所值，小于右侧的所有值")]),t._v(" "),a("p",[t._v("遍历找到当前位置的左侧最大值以及右侧最小值")]),t._v(" "),a("p",[t._v("当位置相同时则为解")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function findNum (arr) {\n  const length = arr.length\n  let up = [], down = []\n  let max = 0, min = arr[length - 1]\n  let result = []\n  for (let i = 0; i < length; i++) {\n    max = Math.max(max, arr[i])\n    up.push(max)\n  }\n  for (let i = length - 1; i >= 0; i--) {\n    min = Math.min(min, arr[i])\n    down.push(min)\n  }\n  down.reverse()\n  for (let i = 0; i < length; i++) {\n    if (up[i] === down[i] && i !== length - 1) {\n      result.push(up[i])\n    }\n  }\n  return result.length ? result : -1\n}\nconsole.log(findNum([7,10,2,6,19,22,32]))\n")])])]),a("h3",{attrs:{id:"先投硬币"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#先投硬币"}},[t._v("#")]),t._v(" 先投硬币")]),t._v(" "),a("p",[t._v("第一个人正面的概率")]),t._v(" "),a("p",[t._v("1-另一人没抛出的概率")]),t._v(" "),a("p",[t._v("等比前n项求和")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1- (1/2 * 1/2 + 1/2 * 1/2 * 1/2 * 1/2 + ....) =\n1- ((1/4) + (1/4)^2 + ... + (1/4)^(n/2)\n= 1- (1/4)(1- (1/4) ^ (n/2)) / (1- 1/4)\n在 n 趋于无穷大的时候，1-(1/4)^(n/2)为 1\n所以上面的式子变成 1-1/3 = 2/3\n")])])]),a("h3",{attrs:{id:"有1000瓶水-其中有一瓶有毒"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有1000瓶水-其中有一瓶有毒"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://www.cnblogs.com/tootti/archive/2011/11/25/2262577.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("有1000瓶水，其中有一瓶有毒"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("给1000个瓶分别标上如下标签（10位长度）：")]),t._v(" "),a("p",[t._v("0000000001 （第1瓶）\n0000000010 （第2瓶）\n0000000011 （第3瓶）\n......\n1111101000 （第1000瓶）\n从编号最后1位是1的所有的瓶子里面取出1滴混在一起（比如从第一瓶，第三瓶，。。。里分别取出一滴混在一起）并标上记号为1。以此类推，从编号第一位是 1的所有的瓶子里面取出1滴混在一起并标上记号为10。现在得到有10个编号的混合液，小白鼠排排站，分别标上10，9，。。。1号，并分别给它们灌上对 应号码的混合液。24小时过去了，过来验尸吧：\n从左到右，死了的小白鼠贴上标签1，没死的贴上0，最后得到一个序号，把这个序号换成10进制的数字，就是有毒的那瓶水的编号。")]),t._v(" "),a("p",[t._v("检验一下：假如第一瓶有毒，按照0000000001 （第1瓶），说明第1号混合液有毒，因此小白鼠的生死符为0000000001（编号为1的小白鼠挂了），0000000001二进制标签转换成十进 制=1号瓶有毒；假如第三瓶有毒，0000000011 （第3瓶），第1号和第2号混合液有毒，因此小白鼠的生死符为00000011（编号为1，2的鼠兄弟挂了），0000000011二进制标签转换成十进 制=3号瓶有毒。")]),t._v(" "),a("p",[t._v("至于这个算法的证明，大概的思路如下：有毒的水，喂食的那几条小狗肯定都会死，剩下的都不会死，只需要说明唯一性就可以了。10条小狗死亡情况的可能性，正好是2^10=1024，跟水瓶一一对应还是没问题的。")]),t._v(" "),a("h3",{attrs:{id:"扔鸡蛋"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扔鸡蛋"}},[t._v("#")]),t._v(" 扔鸡蛋")]),t._v(" "),a("p",[t._v("100楼往下扔鸡蛋")]),t._v(" "),a("p",[t._v("1.从下往上")]),t._v(" "),a("p",[t._v("o(n)")]),t._v(" "),a("p",[t._v("2.二分查找")]),t._v(" "),a("p",[t._v("最坏时比1还多一次")]),t._v(" "),a("p",[t._v("3.每十层投一次")]),t._v(" "),a("p",[t._v("最多19次")]),t._v(" "),a("h3",{attrs:{id:"判断两个升序数组其中一个是另外一个数组的子集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#判断两个升序数组其中一个是另外一个数组的子集"}},[t._v("#")]),t._v(" 判断两个升序数组其中一个是另外一个数组的子集")]),t._v(" "),a("ul",[a("li",[t._v("数组N的所有元素都能在数组M中找到；")]),t._v(" "),a("li",[t._v("数组N项中元素重复项的个数不能大于数组M中元素重复项的个数。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function isSubset(arrM,arrN){//两数组均为升序排序\n    let m = arrM.length;\n    let n = arrN.length;\n    let i = 0, j = 0;\n    while(m > n && i < m && j < n){\n        if(arrM[i] < arrN[j]){//M数组有重复项\n            i++;\n        }else if(arrM[i] > arrN[j]){//N数组重复项数大于M数组重复项数\n            return false;\n        }else{//两项相等\n            i++;\n            j++;\n        }\n    }\n    if(j < n){//N数组元素不全在M数组内\n        return false;\n    }else{\n        return true\n    }\n}\n \nlet arrM = [1,2,2,3,3,4,4,5,5]\nlet arrN = [1,2,3,4,5]\nconsole.log(isSubset(arrM,arrN))//true\n\n")])])]),a("h3",{attrs:{id:"扑克牌同花顺"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扑克牌同花顺"}},[t._v("#")]),t._v(" 扑克牌同花顺")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("现在有54张扑克牌，抽出5张牌，求出同花顺的概率，A代表1，且顺子不能重复\n\n一种花色有9种可能a1234~910jqk \n4种就有36种可能\n所以是36/c54(5)\n")])])]),a("p",[t._v("参考思路：")]),t._v(" "),a("p",[t._v("一把扑克除去大、小王，任意选3张或者5张出现同花顺的概率？任意选三张出现豹子的概率（三张同样数字）?任意三张组合有多少顺子？")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("五张与三张算法一样，只分析三张的情况：一副牌任选三张共有种组合。同花：共种组合；概率为1144/22100=0.05176顺子：假定顺子为A23到JQK共11个，不区分花色A23的顺子有种，同理任何固定顺序的顺子都是64种组合，这样一副牌有64*11=704个顺子；概率为704/22100=0.031855。同花顺：每个花色从A23到JQK有11个顺子，全副牌共44个同花顺；概率为44/22100=0.00199。豹子：共个；概率为52/22100=0.00235。\n")])])]),a("h3",{attrs:{id:"字符串找最长升序的数字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串找最长升序的数字"}},[t._v("#")]),t._v(" 字符串找最长升序的数字")]),t._v(" "),a("p",[t._v('字符串，串中有字母也有阿拉伯数字，需要你从字符串中找到连续，是升序且串长度是符合前两个条件的前提下最长的串，比如说"abc123d2345f45e43"，将字符串"2345"找到并返回。')]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function findUpNumber (str) {\n  let left = 0, right = 0\n  let maxLeft = 0, maxRight = 0\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i]\n    if (isNaN(char)) {\n      left = i + 1\n    } else {\n      // 是数字\n      const nextChar = str[i + 1]\n      // 下一个是数字且大于上一个\n      if (!isNaN(nextChar) && nextChar > char) {\n        right = i + 1\n      } else {\n        left = i + 1\n        right = i + 1\n      }\n    }\n    // 每次找完记录下最长的位置\n    if (right - left > maxRight - maxLeft) {\n      maxLeft = left\n      maxRight = right\n    }\n  }\n  return maxRight > maxLeft ? str.substring(maxLeft, maxRight + 1) : 'not valid data'\n}\nconsole.log(findUpNumber('ab43c1d234f4e43'))\n")])])]),a("h3",{attrs:{id:"货币格式化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#货币格式化"}},[t._v("#")]),t._v(" 货币格式化")]),t._v(" "),a("p",[t._v("正则")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function numberWithCommas(n) {\n  // 正则解释: 匹配到 \\B(非单词边界)后, 后面要匹配到 (\\d{3})+(?!\\d)\n  // (\\d{3})+ 至少匹配到一次或多次三个数字\n  // (?!\\d) 同时后面不是数字的话, 就匹配.\n  // 注意, 后面的(?=)那一段代码只是判断的规则, 匹配到后只替换掉\\B\n  // 而\\B 元字符匹配的是非单词边界\n  let num = n.toString().split('.');\n  num[0] = num[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  return num.join('.');\n}\nconsole.log(numberWithCommas(12345678912.1234))    // \"12,345,678,912.1234\"ss\n")])])]),a("p",[t._v("蠢方法")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var dealNumber = function (money) {\n  if (money && money != null) {\n    money = String(money);\n    var left = money.split('.')[0], right = money.split('.')[1];\n    right = right ? (right.length >= 2 ? '.' + right.substr(0, 2) : '.' + right + '0') : '.00';\n    var temp = left.split('').reverse().join('').match(/(\\d{1,3})/g);\n    console.log(temp)\n    return (Number(money) < 0 ? \"-\" : \"\") + temp.join(',').split('').reverse().join('') + right;\n  } else if (money === 0) {   //注意===在这里的使用，如果传入的money为0,if中会将其判定为boolean类型，故而要另外做===判断\n    return '0.00';\n  } else {\n    return \"\";\n  }\n};\nconsole.log(dealNumber(12451331.22))\n")])])]),a("h3",{attrs:{id:"大整数相加"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#大整数相加"}},[t._v("#")]),t._v(" 大整数相加")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// bigNumberA和bigNumberB使用字符串存储，否则会自动转化为科学计数\n\nlet bigNumberAdd = (bigNumberA, bigNumberB) => {\n    let A  = (bigNumberA + '').split('');\n    let B = (bigNumberB + '').split('');\n    let aLen = A.length, bLen = B.length, cLen = Math.max(aLen, bLen) + 1;\n    let result = [], prefix = 0;\n    for (let i = 0; i< cLen -1; i++ ) {\n        let a = aLen - i - 1 >= 0 ? parseInt(A[aLen - i - 1]) : 0, b = bLen - i - 1 >= 0 ? parseInt(B[bLen - i - 1]) : 0;\n    result[i] = (a + b + prefix) % 10;\n        prefix = Math.floor((a + b + prefix) / 10);\n    }\n    return result.reverse().join('');\n};\nbigNumberAdd('45486646468484544661134868968','544545867466464646');\n")])])]),a("h3",{attrs:{id:"rgb排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rgb排序"}},[t._v("#")]),t._v(" rgb排序")]),t._v(" "),a("p",[t._v('给定一个字符串里面只有"R" "G" "B" 三个字符，请'),a("a",{attrs:{href:"https://www.nowcoder.com/jump/super-jump/word?word=%E6%8E%92%E5%BA%8F",target:"_blank",rel:"noopener noreferrer"}},[t._v("排序"),a("OutboundLink")],1),t._v("，最终结果的顺序是R在前 G中 B在后。时间复杂度为O(n),空间复杂度O(1)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function sortRGB(str) {\n  const length = str.length\n  let rLength = 0\n  let bLength = 0\n  for (let i = 0; i < length; i++) {\n    const char = str[i]\n    if (char === 'R') {\n      if (i !== rLength) {\n        str = str.substring(0, rLength) + 'R' + str.substring(rLength, i) + str.substring(i + 1, length)\n      }\n      rLength++\n    } else if (char === 'B') {\n      if (i < length - bLength) {\n        str = str.substring(0, i) + str.substring(i + 1, length) + 'B'\n        i--\n      }\n      bLength++\n    }\n  }\n  return str\n}\n\nconsole.log(sortRGB('BRGBRGRRGBBGBGR'))\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function sortRGB(str) {\n  return str.split('').sort((a, b) => b > a ? 0 : -1).join('')\n}\nconsole.log(sortRGB('BRGBRGRRGBBGBGR'))\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("for循环记录次数\nfor循环拼出来\n")])])]),a("h3",{attrs:{id:"油漆比例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#油漆比例"}},[t._v("#")]),t._v(" 油漆比例")]),t._v(" "),a("p",[t._v("两桶油漆，A桶全是红色油漆，B桶全是蓝色油漆，将A桶中取一勺倒入B中，再从B桶中取一勺倒入A中，求A桶的蓝红比例和B桶的红蓝比例，是大于、小于还是等于？")]),t._v(" "),a("p",[t._v("x,y")]),t._v(" "),a("p",[t._v("然后算比例就可以了")]),t._v(" "),a("p",[t._v("最后是相等")]),t._v(" "),a("h3",{attrs:{id:"扑克概率"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扑克概率"}},[t._v("#")]),t._v(" 扑克概率")]),t._v(" "),a("p",[t._v("52张扑克牌，取一张不放回，再取一张， 两张为相同颜色的概率是多少？")]),t._v(" "),a("p",[t._v("（1/4） * （12 /51）")]),t._v(" "),a("h1",{attrs:{id:"小浩算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小浩算法"}},[t._v("#")]),t._v(" 小浩算法")]),t._v(" "),a("h2",{attrs:{id:"字符串系列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串系列"}},[t._v("#")]),t._v(" 字符串系列")]),t._v(" "),a("h3",{attrs:{id:"实现sunday匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现sunday匹配"}},[t._v("#")]),t._v(" 实现Sunday匹配")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var s1 = 'Here is a little Hao', s2 = 'little';\n\nfunction strStr(origin, aim) {\n    if (origin == null || aim == null) {\n        return 0;\n    }\n    if (origin.length < aim.length) {\n        return -1;\n    }\n    //目标串匹配索\n    let originIndex = 0;\n    //模式串匹配索引\n    let aimIndex = 0;\n    // 成功匹配完终止条件：所有aim均成功匹配\n    while (aimIndex < aim.length) {\n        // 针对origin匹配完，但aim未匹配完情况处理 如 mississippi sippia\n        if (originIndex > origin.length - 1) {\n            return -1;\n        }\n        if (origin.charAt(originIndex) == aim.charAt(aimIndex)) {\n            // 匹配则index均加1\n            originIndex++;\n            aimIndex++;\n        } else {\n            //在我们上面的样例中，第一次计算值为6，第二次值为13\n            let nextCharIndex = originIndex - aimIndex + aim.length;\n            //判断下一个目标字符（上面图里的那个绿框框）是否存在。\n            if (nextCharIndex < origin.length) {\n                // 判断目标字符在模式串中匹配到，返回最后一个匹配的index\n                let step = aim.lastIndexOf(origin.charAt(nextCharIndex));\n                if (step == -1) {\n                    // 不存在的话，设置到目标字符的下一个元素\n                    originIndex = nextCharIndex + 1;\n                } else {\n                    // 存在的话，移动对应的数字（参考上文中的存在公式）\n                    originIndex = nextCharIndex - step;\n                }\n                //模式串总是从第一个开始匹配\n                aimIndex = 0;\n            } else {\n                return -1;\n            }\n        }\n    }\n    return originIndex - aimIndex;\n}\n\nconsole.log(strStr(s1, s2))\n")])])]),a("h2",{attrs:{id:"其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),a("h3",{attrs:{id:"三门问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三门问题"}},[t._v("#")]),t._v(" 三门问题")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" door "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" changeDoor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" noChangeDoor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" time "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000000")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRandomNum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("round")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("door"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true 换")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTrueOrFalse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("round")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 生成随机天使所在门")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" angelDoor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRandomNum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 生成选择的门")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" chooseDoor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRandomNum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" noChooseDoor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" door"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" item "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" chooseDoor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" noChooseDoorAngel "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" noChooseDoor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findIndex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" item "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" angelDoor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一开始就确定不换 noChangeDoor才会++")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一开始就确定换 changeDoor才会++")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("noChooseDoorAngel "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 上来就选中了天使")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// if (getTrueOrFalse()) {")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// } else {")]),t._v("\n            noChangeDoor"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// }")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 主持人去掉了恶魔，剩下的肯定是天使")]),t._v("\n        changeDoor"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// if (getTrueOrFalse()) {")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     changeDoor++")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// }")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'changeDoor'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" changeDoor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'noChangeDoor'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" noChangeDoor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// changeDoor  0.6248973")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// noChangeDoor 0.3751027")]),t._v("\n")])])])])}),[],!1,null,null,null);n.default=r.exports}}]);