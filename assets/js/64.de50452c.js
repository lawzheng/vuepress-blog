(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{486:function(t,a,s){"use strict";s.r(a);var e=s(70),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h4",{attrs:{id:"规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#规则"}},[t._v("#")]),t._v(" 规则")]),t._v(" "),s("p",[t._v("横向模糊匹配")]),t._v(" "),s("p",[t._v("/ab{1,3}c/g")]),t._v(" "),s("p",[t._v("纵向模糊匹配")]),t._v(" "),s("p",[t._v("/a[123]b/")]),t._v(" "),s("p",[t._v("[1-6a-fG-M]")]),t._v(" "),s("p",[t._v("要匹配-  要么换位置要么转义-")]),t._v(" "),s("p",[t._v("[^1-6a-fG-M] 取反")]),t._v(" "),s("h4",{attrs:{id:"字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符"}},[t._v("#")]),t._v(" 字符")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("字符组")]),t._v(" "),s("th",[t._v("具体含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("\\d")]),t._v(" "),s("td",[t._v("表 记示 忆方式：其 [0-9]。表 英示 文是 是一digit 位数字 （数字） 。 。")])]),t._v(" "),s("tr",[s("td",[t._v("\\D")]),t._v(" "),s("td",[t._v("表示 [^0-9]。表示除数字外的任意字符。")])]),t._v(" "),s("tr",[s("td",[t._v("\\w")]),t._v(" "),s("td",[t._v("表 记示 忆方式： [0-9a-zA-Z_] w 是 word 。表的示数字、 简写，也大小写 称单词字字符 母和下 。 划线。")])]),t._v(" "),s("tr",[s("td",[t._v("\\W")]),t._v(" "),s("td",[t._v("表示 [^0-9a-zA-Z_]。非单词字符。")])]),t._v(" "),s("tr",[s("td",[t._v("\\s")]),t._v(" "),s("td",[t._v("表示 [ \\t\\v\\n\\r\\f]。表示空白符，包括空格、水平制表符、垂直制表符、换行符、回车符、换页 符。 记忆方式：s 是 space 的首字母，空白符的单词是 white space。")])]),t._v(" "),s("tr",[s("td",[t._v("\\S")]),t._v(" "),s("td",[t._v("表示 [^ \\t\\v\\n\\r\\f]。 非空白符。")])]),t._v(" "),s("tr",[s("td",[t._v(".")]),t._v(" "),s("td",[t._v("表示 [^\\n\\r\\u2028\\u2029]。通配符，表示几乎任意字符。换行符、回车符、行分隔符和段分隔符 除外。 记忆方式：想想省略号 … 中的每个点，都可以理解成占位符，表示任何类似的东西。")])])])]),t._v(" "),s("h4",{attrs:{id:"量词"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#量词"}},[t._v("#")]),t._v(" 量词")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("量词")]),t._v(" "),s("th",[t._v("具体含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("{m,}")]),t._v(" "),s("td",[t._v("表示至少出现 m 次。")])]),t._v(" "),s("tr",[s("td",[t._v("{m}")]),t._v(" "),s("td",[t._v("等价于 {m,m}，表示出现 m 次。")])]),t._v(" "),s("tr",[s("td",[t._v("?")]),t._v(" "),s("td",[t._v("等价于 {0,1}，表示出现或者不出现。 记忆方式：问号的意思表示，有吗？")])]),t._v(" "),s("tr",[s("td",[t._v("+")]),t._v(" "),s("td",[t._v("等价于 {1,}，表示出现至少一次。 记忆方式：加号是追加的意思，得先有一个，然后才考虑追加。")])]),t._v(" "),s("tr",[s("td",[t._v("*")]),t._v(" "),s("td",[t._v("等价于 {0,}，表示出现任意次，有可能不出现。 记忆方式：看看天上的星星，可能一颗没有，可能零散有几颗，可能数也数不过来")])])])]),t._v(" "),s("h4",{attrs:{id:"贪婪-惰性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#贪婪-惰性"}},[t._v("#")]),t._v(" 贪婪 惰性")]),t._v(" "),s("p",[t._v("{1，3} 会去找超过3没")]),t._v(" "),s("p",[t._v("{1，3}？ 惰性 有1就行了")]),t._v(" "),s("h4",{attrs:{id:"多选"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多选"}},[t._v("#")]),t._v(" 多选")]),t._v(" "),s("p",[t._v("/good|nice/  惰性的")]),t._v(" "),s("h4",{attrs:{id:"匹配颜色"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#匹配颜色"}},[t._v("#")]),t._v(" 匹配颜色")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("/#([0-9a-fA-F]{3}|#[0-9a-fA-F]{6})/g\n")])])]),s("h4",{attrs:{id:"写法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#写法"}},[t._v("#")]),t._v(" 写法")]),t._v(" "),s("p",[t._v("string.macth(reg)")]),t._v(" "),s("p",[t._v("reg.test(string)")]),t._v(" "),s("h4",{attrs:{id:"小时"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小时"}},[t._v("#")]),t._v(" 小时")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("/^([01][0-9]|[2][0-3]):[0-5][0-9]$/\n")])])]),s("h4",{attrs:{id:"年月日"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#年月日"}},[t._v("#")]),t._v(" 年月日")]),t._v(" "),s("p",[t._v("不精确")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("/^[0-9]{4}-([0][1-9]|[1][0-2])-([0][1-9]|[12][0-9]|[3][01])$/\n")])])]),s("h4",{attrs:{id:"电脑路径"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#电脑路径"}},[t._v("#")]),t._v(" 电脑路径")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('/^[a-zA-Z]:\\\\([^\\\\:*<>|"?\\r\\n/]+\\\\)*([^\\\\:*<>|"?\\r\\n/]+)?$/\n')])])]),s("h4",{attrs:{id:"取id"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#取id"}},[t._v("#")]),t._v(" 取id")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('/id="[^"]*"/\n')])])]),s("h4",{attrs:{id:"换行匹配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#换行匹配"}},[t._v("#")]),t._v(" 换行匹配")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("'hello\\nioe\\ndfwef'.replace(/^|$/gm, '#')\n")])])]),s("h4",{attrs:{id:"单词边界"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单词边界"}},[t._v("#")]),t._v(" 单词边界")]),t._v(" "),s("p",[t._v("\\b  具体就是 \\w 与 \\W 之间的位置")]),t._v(" "),s("p",[t._v("\\B 具体说来就是 \\w 与 \\w、 \\W 与 \\W、^ 与 \\W，\\W 与 $ 之间的位置")]),t._v(" "),s("h4",{attrs:{id:"p-和-p"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#p-和-p"}},[t._v("#")]),t._v(" (?=p) 和 (?!p)")]),t._v(" "),s("p",[t._v("正向先行断言和负向先行断言")]),t._v(" "),s("p",[t._v("p前面   取反")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("'hello'.replace(/(?<=l)/g, '#') 右边\n(?!l) 取反\n")])])]),s("h4",{attrs:{id:"不匹配任何东西的正则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不匹配任何东西的正则"}},[t._v("#")]),t._v(" 不匹配任何东西的正则")]),t._v(" "),s("p",[t._v("/.^/")]),t._v(" "),s("h4",{attrs:{id:"数字的千位分隔符表示法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数字的千位分隔符表示法"}},[t._v("#")]),t._v(" 数字的千位分隔符表示法")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("/\\B(?=(\\d{3})+\\b)/\n")])])]),s("h4",{attrs:{id:"货币格式化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#货币格式化"}},[t._v("#")]),t._v(" 货币格式化")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("format")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("num")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toFixed")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\B(?=(\\d{3})+\\b)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("','")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$$ '")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"括号引用-改年月日格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#括号引用-改年月日格式"}},[t._v("#")]),t._v(" 括号引用  改年月日格式")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("let reg = /(\\d{4})-(\\d{2})-(\\d{2})/\nlet string = '2017-05-12'\nconsole.log(string.replace(reg, '$2/$3/$1'))  // 05/12/2017\n")])])]),s("p",[t._v("$123表示括号的分组  从1开始")]),t._v(" "),s("p",[t._v("reg里写")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("/(\\d{4})(-|\\/|\\.)(\\d{2})\\2(\\d{2})/\n")])])]),s("p",[t._v("\\2 同 外面的$2")]),t._v(" "),s("p",[t._v("括号嵌套时以左括号计算")]),t._v(" "),s("p",[t._v("\\10表示第10个括号")]),t._v(" "),s("p",[t._v("反向引用以最后的匹配结果为准")]),t._v(" "),s("h4",{attrs:{id:"非捕获括号-p-和-p1-p2-p3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非捕获括号-p-和-p1-p2-p3"}},[t._v("#")]),t._v(" 非捕获括号 (?:p) 和 (?:p1|p2|p3)")]),t._v(" "),s("h4",{attrs:{id:"模仿trim"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模仿trim"}},[t._v("#")]),t._v(" 模仿trim")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("trim (str) {\n        // return str.replace(/^\\s+|\\s+$/g, '')\n        return str.replace(/^\\s*(.*?)\\s*$/g, '$1')\n      },\n")])])]),s("h4",{attrs:{id:"首字母大写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#首字母大写"}},[t._v("#")]),t._v(" 首字母大写")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("titleize (str) {\n        return str.toLowerCase().replace(/(?:^|\\s)\\w/g, function (c) {\n          return c.toUpperCase()\n        })\n      },\n")])])]),s("h4",{attrs:{id:"大驼峰"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#大驼峰"}},[t._v("#")]),t._v(" 大驼峰")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("camelize (str) {\n        return str.replace(/[-_\\s]+(.)?/g, (match, c) => {\n          return c ? c.toUpperCase() : ''\n        })\n      },\n")])])]),s("p",[t._v("c代表第一个组，可以一直往下加组")]),t._v(" "),s("h4",{attrs:{id:"逆驼峰"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逆驼峰"}},[t._v("#")]),t._v(" 逆驼峰")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("dasherize (str) {\n        return str.replace(/([A-Z])/g, '-$1').replace(/[-_\\s]+/g, '-').toLowerCase()\n      },\n")])])]),s("h4",{attrs:{id:"html-转义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#html-转义"}},[t._v("#")]),t._v(" html 转义")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("escapeHtml (str) {\n        const escapeChars = {\n          '<': 'lt',\n          '>': 'gt',\n          '\"': 'quot',\n          '&': 'amp',\n          '\\'': '#39'\n        }\n        return str.replace(new RegExp('[' + Object.keys(escapeChars).join('') + ']', 'g'), (match) => {\n          return '&' + escapeChars[match] + ';'\n        })\n      },\n")])])]),s("h4",{attrs:{id:"反转义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反转义"}},[t._v("#")]),t._v(" 反转义")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("function unescapeHTML (str) {\n    var htmlEntities = {\n        nbsp: ' ',\n        lt: '<',\n        gt: '>',\n        quot: '\"',\n        amp: '&',\n        apos: '\\''\n    };\n    return str.replace(/\\&([^;]+);/g, function (match, key) {\n        if (key in htmlEntities) {\n        \treturn htmlEntities[key];\n        }\n    \treturn match;\n    });\n}\nconsole.log( unescapeHTML('&lt;div&gt;Blah blah blah&lt;/div&gt;') );\n")])])]),s("h4",{attrs:{id:"匹配成对标签"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#匹配成对标签"}},[t._v("#")]),t._v(" 匹配成对标签")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("/<([^>]+)>[\\d\\D]*<\\/\\1>/\n")])])]),s("p",[t._v("\\1反向引用")]),t._v(" "),s("h4",{attrs:{id:"replace"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#replace"}},[t._v("#")]),t._v(" replace")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("属性")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("$1,$2,…,$99")]),t._v(" "),s("td",[t._v("匹配第 1-99 个 分组里捕获的文本")])]),t._v(" "),s("tr",[s("td",[t._v("$&")]),t._v(" "),s("td",[t._v("匹配到的子串文本")])]),t._v(" "),s("tr",[s("td",[t._v("$`")]),t._v(" "),s("td",[t._v("匹配到的子串的左边文本")])]),t._v(" "),s("tr",[s("td",[t._v("$'")]),t._v(" "),s("td",[t._v("匹配到的子串的右边文本")])]),t._v(" "),s("tr",[s("td",[t._v("$$")]),t._v(" "),s("td",[t._v("美元符号")])])])]),t._v(" "),s("h4",{attrs:{id:"regex-source"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#regex-source"}},[t._v("#")]),t._v(" regex.source")]),t._v(" "),s("p",[t._v("看写的究竟是什么")]),t._v(" "),s("h4",{attrs:{id:"判断数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#判断数据类型"}},[t._v("#")]),t._v(" 判断数据类型")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('var utils = {};\n"Boolean|Number|String|Function|Array|Date|RegExp|Object|Error".split("|").forEach(fun\nction (item) {\nutils["is" + item] = function (obj) {\nreturn {}.toString.call(obj) == "[object " + item + "]";\n};\n});\nconsole.log( utils.isArray([1, 2, 3]) );\n')])])])])}),[],!1,null,null,null);a.default=r.exports}}]);