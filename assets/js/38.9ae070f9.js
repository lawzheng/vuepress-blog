(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{443:function(n,e,i){"use strict";i.r(e);var s=i(38),r=Object(s.a)({},(function(){var n=this._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h1",{attrs:{id:"node-js读取文件-添加依赖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#node-js读取文件-添加依赖"}},[this._v("#")]),this._v(" node.js读取文件，添加依赖")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("var fs = require('fs');\nvar path = require('path');\n\n//解析需要遍历的文件夹\nvar filePath = path.resolve('./pages');\n\n//调用文件遍历方法\nfileDisplay(filePath);\n\n/**\n * 文件遍历方法\n * @param filePath 需要遍历的文件路径\n */\nfunction fileDisplay(filePath) {\n    //根据文件路径读取文件，返回文件列表\n    fs.readdir(filePath, function (err, files) {\n        if (err) {\n            console.warn(err)\n        } else {\n            //遍历读取到的文件列表\n            files.forEach(function (filename) {\n                //获取当前文件的绝对路径\n                var filedir = path.join(filePath, filename);\n                //根据文件路径获取文件信息，返回一个fs.Stats对象\n                fs.stat(filedir, function (eror, stats) {\n                    if (eror) {\n                        console.warn('获取文件stats失败');\n                    } else {\n                        var isFile = stats.isFile();// 是文件\n                        var isDir = stats.isDirectory();// 是文件夹\n                        if (isFile && path.extname(filedir) === '.js') {\n                            readJsFile(filedir, filename)\n                        }\n                        if (isDir) {\n                            fileDisplay(filedir);//递归，如果是文件夹，就继续遍历该文件夹下面的文件\n                        }\n                    }\n                })\n            });\n        }\n    });\n}\n\n/**\n * 读取js文件 找到依赖\n * @param {*} filedir \n * @param {*} filename \n */\nfunction readJsFile(filedir, filename) {\n    fs.readFile(filedir, 'utf-8', (err, data) => {\n        if (err) {\n            console.error(err);\n        } else {\n            // 找到文件中需要添加的依赖\n            const depsTemp = data.match(/(B)((\\.[a-zA-Z.]+){2,})/g)\n            // const depsTemp = data.match(/(B|SF|SFX)((\\.[a-zA-Z.]+){2,})/g)\n            let deps = []\n            let depMap = new Set()\n            for (let key in depsTemp) {\n                const dep = depsTemp[key].replace('new ', '').replace('(', '')\n                if (!depMap.has(dep) &&             // 去重\n                    !dep.includes(filename.replace('.js', '')) &&          // 自己不需要写入依赖\n                    !dep.includes('.call') &&           // call调用的\n                    !dep.includes('.apply') &&          // apply调用的\n                    !dep.includes('.prototype.')\n                    // !dep.includes('SF.core.') &&\n                    // !inWhiteList(dep) &&\n                ) {\n                    depMap.add(dep)\n                    deps.push(dep)\n                }\n            }\n            // 写入deps\n            const depsDir = filedir.replace('.js', '.deps')\n            readDepsFile(depsDir, deps)\n        }\n    });\n}\n\n/**\n * 白名单 是这里的就不需要添加\n * @param {*} dep \n */\nfunction inWhiteList (dep) {\n    return [\n        'SF.core.register',\n        'SF.form.Form',\n        'SF.form.JsonField',\n        'SF.form.FormWindow',\n        'SF.Ajax.jsonRequest',\n        'SF.Ajax.abort',\n        'SF.Ajax.request',\n        'SF.util.IntervalTask',\n        'SFX.viewport.init'\n    ].findIndex(item => {\n        return item === dep\n    }) > -1\n}\n\n/**\n * 读取deps文件\n * @param {*} depsDir \n * @param {*} deps \n */\nfunction readDepsFile(depsDir, deps) {\n    fs.readFile(depsDir, 'utf-8', (err, data) => {\n        if (err) {\n            // 没有依赖文件 直接全部写入\n            deps.forEach(dep => {\n                writeDeps(depsDir, dep)\n            })\n        } else {\n            // 有依赖文件，找没有的依赖加上去\n            const oldDeps = data.split('\\r\\n')\n            deps.forEach(dep => {\n                const findIndex = oldDeps.findIndex(old => {\n                    return old === dep\n                })\n                if (findIndex === -1) {\n                    writeDeps(depsDir, dep)\n                }\n            })\n        }\n    });\n}\n\n/**\n * 写入 增加换行符及添加记录\n * @param {*} dir \n * @param {*} content \n */\nfunction writeDeps (dir, content) {\n    fs.appendFileSync(dir, `\\r\\n${content}`)\n    // 添加记录\n    fs.appendFileSync('E:\\\\test deps\\\\deps.txt', `\\r\\n${dir}: ${content}`)\n}\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);