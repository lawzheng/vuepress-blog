(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{499:function(e,t,n){"use strict";n.r(t);var a=n(70),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"vue"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue"}},[e._v("#")]),e._v(" Vue")]),e._v(" "),n("h2",{attrs:{id:"_1-nexttick"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-nexttick"}},[e._v("#")]),e._v(" 1. nextTick")]),e._v(" "),n("p",[e._v("在下次"),n("code",[e._v("dom")]),e._v("更新循环结束之后执行延迟回调，可用于获取更新后的"),n("code",[e._v("dom")]),e._v("状态")]),e._v(" "),n("ul",[n("li",[e._v("新版本中默认是"),n("code",[e._v("microtasks")]),e._v(", "),n("code",[e._v("v-on")]),e._v("中会使用"),n("code",[e._v("macrotasks")])]),e._v(" "),n("li",[n("code",[e._v("macrotasks")]),e._v("任务的实现:\n"),n("ul",[n("li",[n("code",[e._v("setImmediate / MessageChannel / setTimeout")])])])])]),e._v(" "),n("h2",{attrs:{id:"_2-生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-生命周期"}},[e._v("#")]),e._v(" 2. 生命周期")]),e._v(" "),n("ul",[n("li",[n("p",[n("code",[e._v("_init_")])]),e._v(" "),n("ul",[n("li",[n("p",[n("code",[e._v("initLifecycle/Event")]),e._v("，往"),n("code",[e._v("vm")]),e._v("上挂载各种属性")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("callHook: beforeCreated")]),e._v(": 实例刚创建")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("initInjection/initState")]),e._v(": 初始化注入和 data 响应性")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("created")]),e._v(": 创建完成，属性已经绑定， 但还未生成真实"),n("code",[e._v("dom")])])]),e._v(" "),n("li",[n("p",[e._v("进行元素的挂载： "),n("code",[e._v("$el / vm.$mount()")])])]),e._v(" "),n("li",[n("p",[e._v("是否有")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("template\n")])])]),n("p",[e._v(": 解析成")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("render function\n")])])]),n("ul",[n("li",[n("code",[e._v("*.vue")]),e._v("文件: "),n("code",[e._v("vue-loader")]),e._v("会将"),n("code",[e._v("编译成")]),e._v("render function`")])])]),e._v(" "),n("li",[n("p",[n("code",[e._v("beforeMount")]),e._v(": 模板编译/挂载之前")])]),e._v(" "),n("li",[n("p",[e._v("执行"),n("code",[e._v("render function")]),e._v("，生成真实的"),n("code",[e._v("dom")]),e._v("，并替换到"),n("code",[e._v("dom tree")]),e._v("中")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("mounted")]),e._v(": 组件已挂载")])])])]),e._v(" "),n("li",[n("p",[n("code",[e._v("update")]),e._v(":")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("执行"),n("code",[e._v("diff")]),e._v("算法，比对改变是否需要触发UI更新")])]),e._v(" "),n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("flushScheduleQueue\n")])])]),n("ul",[n("li",[n("code",[e._v("watcher.before")]),e._v(": 触发"),n("code",[e._v("beforeUpdate")]),e._v("钩子\t\t- "),n("code",[e._v("watcher.run()")]),e._v(": 执行"),n("code",[e._v("watcher")]),e._v("中的 "),n("code",[e._v("notify")]),e._v("，通知所有依赖项更新UI")])])]),e._v(" "),n("li",[n("p",[e._v("触发"),n("code",[e._v("updated")]),e._v("钩子: 组件已更新")])])])]),e._v(" "),n("li",[n("p",[n("code",[e._v("actived / deactivated(keep-alive)")]),e._v(": 不销毁，缓存，组件激活与失活")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("destroy")]),e._v(":")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("beforeDestroy")]),e._v(": 销毁开始")]),e._v(" "),n("li",[e._v("销毁自身且递归销毁子组件以及事件监听\n"),n("ul",[n("li",[n("code",[e._v("remove()")]),e._v(": 删除节点")]),e._v(" "),n("li",[n("code",[e._v("watcher.teardown()")]),e._v(": 清空依赖")]),e._v(" "),n("li",[n("code",[e._v("vm.$off()")]),e._v(": 解绑监听")])])]),e._v(" "),n("li",[n("code",[e._v("destroyed")]),e._v(": 完成后触发钩子")])])])]),e._v(" "),n("p",[e._v("上面是"),n("code",[e._v("vue")]),e._v("的声明周期的简单梳理，接下来我们直接以代码的形式来完成"),n("code",[e._v("vue")]),e._v("的初始化")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("new Vue({})\n\n// 初始化Vue实例\nfunction _init() {\n\t // 挂载属性\n    initLifeCycle(vm) \n    // 初始化事件系统，钩子函数等\n    initEvent(vm) \n    // 编译slot、vnode\n    initRender(vm) \n    // 触发钩子\n    callHook(vm, 'beforeCreate')\n    // 添加inject功能\n    initInjection(vm)\n    // 完成数据响应性 props/data/watch/computed/methods\n    initState(vm)\n    // 添加 provide 功能\n    initProvide(vm)\n    // 触发钩子\n    callHook(vm, 'created')\n\t\t\n\t // 挂载节点\n    if (vm.$options.el) {\n        vm.$mount(vm.$options.el)\n    }\n}\n\n// 挂载节点实现\nfunction mountComponent(vm) {\n\t // 获取 render function\n    if (!this.options.render) {\n        // template to render\n        // Vue.compile = compileToFunctions\n        let { render } = compileToFunctions() \n        this.options.render = render\n    }\n    // 触发钩子\n    callHook('beforeMounte')\n    // 初始化观察者\n    // render 渲染 vdom， \n    vdom = vm.render()\n    // update: 根据 diff 出的 patchs 挂载成真实的 dom \n    vm._update(vdom)\n    // 触发钩子  \n    callHook(vm, 'mounted')\n}\n\n// 更新节点实现\nfuntion queueWatcher(watcher) {\n\tnextTick(flushScheduleQueue)\n}\n\n// 清空队列\nfunction flushScheduleQueue() {\n\t // 遍历队列中所有修改\n    for(){\n\t    // beforeUpdate\n        watcher.before()\n         \n        // 依赖局部更新节点\n        watcher.update() \n        callHook('updated')\n    }\n}\n\n// 销毁实例实现\nVue.prototype.$destory = function() {\n\t // 触发钩子\n    callHook(vm, 'beforeDestory')\n    // 自身及子节点\n    remove() \n    // 删除依赖\n    watcher.teardown() \n    // 删除监听\n    vm.$off() \n    // 触发钩子\n    callHook(vm, 'destoryed')\n}\n复制代码\n")])])]),n("h2",{attrs:{id:"_3-数据响应-数据劫持"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-数据响应-数据劫持"}},[e._v("#")]),e._v(" 3. 数据响应(数据劫持)")]),e._v(" "),n("p",[e._v("看完生命周期后，里面的"),n("code",[e._v("watcher")]),e._v("等内容其实是数据响应中的一部分。数据响应的实现由两部分构成: "),n("strong",[e._v("观察者( watcher )")]),e._v(" 和 "),n("strong",[e._v("依赖收集器( Dep )")]),e._v("，其核心是 "),n("code",[e._v("defineProperty")]),e._v("这个方法，它可以 "),n("strong",[e._v("重写属性的 get 与 set")]),e._v(" 方法，从而完成监听数据的改变。")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("Observe (观察者)观察 props 与 state")]),e._v(" "),n("ul",[n("li",[e._v("遍历 props 与 state，对每个属性创建独立的监听器( watcher )")])])]),e._v(" "),n("li",[n("p",[e._v("使用")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("defineProperty\n")])])]),n("p",[e._v("重写每个属性的 get/set(")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("defineReactive\n")])])]),n("p",[e._v("）")]),e._v(" "),n("ul",[n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("get\n")])])]),n("p",[e._v(": 收集依赖")]),e._v(" "),n("ul",[n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Dep.depend()\n")])])]),n("ul",[n("li",[n("code",[e._v("watcher.addDep()")])])])])])]),e._v(" "),n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("set\n")])])]),n("p",[e._v(": 派发更新")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("Dep.notify()")])]),e._v(" "),n("li",[n("code",[e._v("watcher.update()")])]),e._v(" "),n("li",[n("code",[e._v("queenWatcher()")])]),e._v(" "),n("li",[n("code",[e._v("nextTick")])]),e._v(" "),n("li",[n("code",[e._v("flushScheduleQueue")])]),e._v(" "),n("li",[n("code",[e._v("watcher.run()")])]),e._v(" "),n("li",[n("code",[e._v("updateComponent()")])])])])])])]),e._v(" "),n("p",[e._v("大家可以先看下面的数据相应的代码实现后，理解后就比较容易看懂上面的简单脉络了。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let data = {a: 1}\n// 数据响应性\nobserve(data)\n\n// 初始化观察者\nnew Watcher(data, 'name', updateComponent)\ndata.a = 2\n\n// 简单表示用于数据更新后的操作\nfunction updateComponent() {\n    vm._update() // patchs\n}\n\n// 监视对象\nfunction observe(obj) {\n\t // 遍历对象，使用 get/set 重新定义对象的每个属性值\n    Object.keys(obj).map(key => {\n        defineReactive(obj, key, obj[key])\n    })\n}\n\nfunction defineReactive(obj, k, v) {\n    // 递归子属性\n    if (type(v) == 'object') observe(v)\n    \n    // 新建依赖收集器\n    let dep = new Dep()\n    // 定义get/set\n    Object.defineProperty(obj, k, {\n        enumerable: true,\n        configurable: true,\n        get: function reactiveGetter() {\n        \t  // 当有获取该属性时，证明依赖于该对象，因此被添加进收集器中\n            if (Dep.target) {\n                dep.addSub(Dep.target)\n            }\n            return v\n        },\n        // 重新设置值时，触发收集器的通知机制\n        set: function reactiveSetter(nV) {\n            v = nV\n            dep.nofify()\n        },\n    })\n}\n\n// 依赖收集器\nclass Dep {\n    constructor() {\n        this.subs = []\n    }\n    addSub(sub) {\n        this.subs.push(sub)\n    }\n    notify() {\n        this.subs.map(sub => {\n            sub.update()\n        })\n    }\n}\n\nDep.target = null\n\n// 观察者\nclass Watcher {\n    constructor(obj, key, cb) {\n        Dep.target = this\n        this.cb = cb\n        this.obj = obj\n        this.key = key\n        this.value = obj[key]\n        Dep.target = null\n    }\n    addDep(Dep) {\n        Dep.addSub(this)\n    }\n    update() {\n        this.value = this.obj[this.key]\n        this.cb(this.value)\n    }\n    before() {\n        callHook('beforeUpdate')\n    }\n}\n复制代码\n")])])]),n("h2",{attrs:{id:"_4-virtual-dom-原理实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-virtual-dom-原理实现"}},[e._v("#")]),e._v(" 4. virtual dom 原理实现")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("创建 dom 树")])]),e._v(" "),n("li",[n("p",[e._v("树的"),n("code",[e._v("diff")]),e._v("，同层对比，输出"),n("code",[e._v("patchs(listDiff/diffChildren/diffProps)")])]),e._v(" "),n("ul",[n("li",[n("p",[e._v("没有新的节点，返回")])]),e._v(" "),n("li",[n("p",[e._v("新的节点")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("tagName\n")])])]),n("p",[e._v("与")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("key\n")])])]),n("p",[e._v("不变， 对比")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("props\n")])])]),n("p",[e._v("，继续递归遍历子树")]),e._v(" "),n("ul",[n("li",[e._v("对比属性(对比新旧属性列表):\n"),n("ul",[n("li",[e._v("旧属性是否存在与新属性列表中")]),e._v(" "),n("li",[e._v("都存在的是否有变化")]),e._v(" "),n("li",[e._v("是否出现旧列表中没有的新属性")])])])])]),e._v(" "),n("li",[n("p",[n("code",[e._v("tagName")]),e._v("和"),n("code",[e._v("key")]),e._v("值变化了，则直接替换成新节点")])])])]),e._v(" "),n("li",[n("p",[e._v("渲染差异")]),e._v(" "),n("ul",[n("li",[e._v("遍历"),n("code",[e._v("patchs")]),e._v("， 把需要更改的节点取出来")]),e._v(" "),n("li",[e._v("局部更新"),n("code",[e._v("dom")])])])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// diff算法的实现\nfunction diff(oldTree, newTree) {\n\t // 差异收集\n    let pathchs = {}\n    dfs(oldTree, newTree, 0, pathchs)\n    return pathchs\n}\n\nfunction dfs(oldNode, newNode, index, pathchs) {\n    let curPathchs = []\n    if (newNode) {\n        // 当新旧节点的 tagName 和 key 值完全一致时\n        if (oldNode.tagName === newNode.tagName && oldNode.key === newNode.key) {\n        \t  // 继续比对属性差异\n            let props = diffProps(oldNode.props, newNode.props)\n            curPathchs.push({ type: 'changeProps', props })\n            // 递归进入下一层级的比较\n            diffChildrens(oldNode.children, newNode.children, index, pathchs)\n        } else {\n        \t  // 当 tagName 或者 key 修改了后，表示已经是全新节点，无需再比\n            curPathchs.push({ type: 'replaceNode', node: newNode })\n        }\n    }\n\n\t // 构建出整颗差异树\n    if (curPathchs.length) {\n    \t\tif(pathchs[index]){\n    \t\t\tpathchs[index] = pathchs[index].concat(curPathchs)\n    \t\t} else {\n    \t\t\tpathchs[index] = curPathchs\n    \t\t}\n    }\n}\n\n// 属性对比实现\nfunction diffProps(oldProps, newProps) {\n    let propsPathchs = []\n    // 遍历新旧属性列表\n    // 查找删除项\n    // 查找修改项\n    // 查找新增项\n    forin(olaProps, (k, v) => {\n        if (!newProps.hasOwnProperty(k)) {\n            propsPathchs.push({ type: 'remove', prop: k })\n        } else {\n            if (v !== newProps[k]) {\n                propsPathchs.push({ type: 'change', prop: k , value: newProps[k] })\n            }\n        }\n    })\n    forin(newProps, (k, v) => {\n        if (!oldProps.hasOwnProperty(k)) {\n            propsPathchs.push({ type: 'add', prop: k, value: v })\n        }\n    })\n    return propsPathchs\n}\n\n// 对比子级差异\nfunction diffChildrens(oldChild, newChild, index, pathchs) {\n\t\t// 标记子级的删除/新增/移动\n    let { change, list } = diffList(oldChild, newChild, index, pathchs)\n    if (change.length) {\n        if (pathchs[index]) {\n            pathchs[index] = pathchs[index].concat(change)\n        } else {\n            pathchs[index] = change\n        }\n    }\n\n\t // 根据 key 获取原本匹配的节点，进一步递归从头开始对比\n    oldChild.map((item, i) => {\n        let keyIndex = list.indexOf(item.key)\n        if (keyIndex) {\n            let node = newChild[keyIndex]\n            // 进一步递归对比\n            dfs(item, node, index, pathchs)\n        }\n    })\n}\n\n// 列表对比，主要也是根据 key 值查找匹配项\n// 对比出新旧列表的新增/删除/移动\nfunction diffList(oldList, newList, index, pathchs) {\n    let change = []\n    let list = []\n    const newKeys = getKey(newList)\n    oldList.map(v => {\n        if (newKeys.indexOf(v.key) > -1) {\n            list.push(v.key)\n        } else {\n            list.push(null)\n        }\n    })\n\n    // 标记删除\n    for (let i = list.length - 1; i>= 0; i--) {\n        if (!list[i]) {\n            list.splice(i, 1)\n            change.push({ type: 'remove', index: i })\n        }\n    }\n\n    // 标记新增和移动\n    newList.map((item, i) => {\n        const key = item.key\n        const index = list.indexOf(key)\n        if (index === -1 || key == null) {\n            // 新增\n            change.push({ type: 'add', node: item, index: i })\n            list.splice(i, 0, key)\n        } else {\n            // 移动\n            if (index !== i) {\n                change.push({\n                    type: 'move',\n                    form: index,\n                    to: i,\n                })\n                move(list, index, i)\n            }\n        }\n    })\n\n    return { change, list }\n}\n复制代码\n")])])]),n("h2",{attrs:{id:"_5-proxy-相比于-defineproperty-的优势"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-proxy-相比于-defineproperty-的优势"}},[e._v("#")]),e._v(" 5. Proxy 相比于 defineProperty 的优势")]),e._v(" "),n("ul",[n("li",[e._v("数组变化也能监听到")]),e._v(" "),n("li",[e._v("不需要深度遍历监听")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let data = { a: 1 }\nlet reactiveData = new Proxy(data, {\n\tget: function(target, name){\n\t\t// ...\n\t},\n\t// ...\n})\n")])])]),n("h2",{attrs:{id:"_6-vue-router"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-vue-router"}},[e._v("#")]),e._v(" 6. vue-router")]),e._v(" "),n("ul",[n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("mode\n")])])]),n("ul",[n("li",[n("code",[e._v("hash")])]),e._v(" "),n("li",[n("code",[e._v("history")])])])]),e._v(" "),n("li",[n("p",[e._v("跳转")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("this.$router.push()")])]),e._v(" "),n("li",[n("code",[e._v('<router-link to=""></router-link>')])])])]),e._v(" "),n("li",[n("p",[e._v("占位")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("<router-view></router-view>")])])])])]),e._v(" "),n("h2",{attrs:{id:"_7-vuex"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-vuex"}},[e._v("#")]),e._v(" 7. vuex")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("state")]),e._v(": 状态中心")]),e._v(" "),n("li",[n("code",[e._v("mutations")]),e._v(": 更改状态")]),e._v(" "),n("li",[n("code",[e._v("actions")]),e._v(": 异步更改状态")]),e._v(" "),n("li",[n("code",[e._v("getters")]),e._v(": 获取状态")]),e._v(" "),n("li",[n("code",[e._v("modules")]),e._v(": 将"),n("code",[e._v("state")]),e._v("分成多个"),n("code",[e._v("modules")]),e._v("，便于管理")])]),e._v(" "),n("h2",{attrs:{id:"vue初始化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue初始化"}},[e._v("#")]),e._v(" vue初始化")]),e._v(" "),n("p",[e._v("装最新脚手架 装之前卸载旧的")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("npm install -g @vue/cli\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("vue create project-name    // vue-cli3\nvue init webpack project-name    //vue-cli2\n")])])]),n("h2",{attrs:{id:"组件间获取值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组件间获取值"}},[e._v("#")]),e._v(" 组件间获取值")]),e._v(" "),n("h3",{attrs:{id:"父组件获取子组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#父组件获取子组件"}},[e._v("#")]),e._v(" 父组件获取子组件")]),e._v(" "),n("p",[n("strong",[e._v("$children")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<template>\n  <div class="index">\n    <Header></Header>\n    <HelloWorld :message="message"></HelloWorld>\n    <button @click="goPro">跳转</button>\n  </div>\n</template>\n\nmounted(){\n console.log(this.$children)\n}\n')])])]),n("p",[e._v("缺点：")]),e._v(" "),n("p",[e._v("无法确定子组件的顺序，也不是响应式的。如果你确切的知道要访问子组件建议使用$refs。")]),e._v(" "),n("p",[n("strong",[e._v("$refs")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<HelloWorld ref="hello" :message="message"></HelloWorld>\n\nthis.$refs.hello.属性\nthis.$refs.hello.方法\n')])])]),n("p",[n("strong",[e._v("$emit/$on")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("子组件发射事件，可带参数\n")])])]),n("h3",{attrs:{id:"子组件获取父组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#子组件获取父组件"}},[e._v("#")]),e._v(" 子组件获取父组件")]),e._v(" "),n("p",[n("strong",[e._v("$parent")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("this.$parent.属性\nthis.$parent.方法\n")])])]),n("p",[n("strong",[e._v("prop")])]),e._v(" "),n("p",[e._v("父组件通过prop传给子组件")]),e._v(" "),n("h3",{attrs:{id:"隔代传值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#隔代传值"}},[e._v("#")]),e._v(" 隔代传值")]),e._v(" "),n("p",[n("strong",[e._v("inheritAttrs")])]),e._v(" "),n("p",[e._v("这是@2.4 新增的属性和接口。inheritAttrs 属性控制子组件 html 属性上是否显示父组件的提供的属性。")]),e._v(" "),n("p",[e._v("子组件没用prop接收的值会显示在html上")]),e._v(" "),n("p",[e._v("inheritAttrs: false即可隐藏")]),e._v(" "),n("p",[n("strong",[e._v("$attrs/$listener")])]),e._v(" "),n("p",[e._v("没被prop接收的可直接用$attrs接收")]),e._v(" "),n("p",[e._v("同理 没被接收的事件可用$listener接收")]),e._v(" "),n("p",[e._v("可传给孙组件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('v-bind="$attrs"\nv-on="$listeners"\n')])])]),n("p",[n("strong",[e._v("provide / inject")])]),e._v(" "),n("p",[e._v("简单的说，当组件的引入层次过多，我们的子孙组件想要获取祖先组件的资源，那么怎么办呢，总不能一直取父级往上吧，而且这样代码结构容易混乱。这个就是 provide / inject 要干的事情。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<template>\n  <div>\n<childOne></childOne>\n  </div>\n</template>\n\n<script>\n  import childOne from \'../components/test/ChildOne\'\n  export default {\n    name: "Parent",\n    provide: {\n      for: "demo"\n    },\n    components:{\n      childOne\n    }\n  }\n')])])]),n("p",[e._v("在这里我们在父组件中 provide for 这个变量，然后直接设置三个组件（childOne、childTwo 、childThird）并且一层层不断内嵌其中， 而在最深层的 childThird 组件中我们可以通过 inject 获取 for 这个变量")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<template>\n  <div>\n    {{demo}}\n  </div>\n</template>\n\n<script>\n  export default {\n    name: \"\",\n    inject: ['for'],\n    data() {\n      return {\n        demo: this.for\n      }\n    }\n  }\n<\/script>\n")])])]),n("p",[e._v("provide的值不是响应式的，非要响应式就得把this传过去")]),e._v(" "),n("p",[e._v("而且inject没接收到值的时候会报错，所以该组件不好复用，一般不推荐使用，在组件库用的多")]),e._v(" "),n("h3",{attrs:{id:"dispatch-派发"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dispatch-派发"}},[e._v("#")]),e._v(" dispatch 派发")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Vue.prototype.$dispatch = function(eventName, data) {\n  let parent = this.$parent;\n  // 查找父元素\n  while (parent) {\n    if (parent) {\n      // 父元素用$emit触发\n      parent.$emit(eventName, data);\n      // 递归查找父元素\n      parent = parent.$parent;\n    } else {\n      break;\n    }\n  }\n};\n")])])]),n("h3",{attrs:{id:"broadcast-广播"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#broadcast-广播"}},[e._v("#")]),e._v(" broadcast 广播")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Vue.prototype.$boardcast = function(eventName, data) {\n  boardcast.call(this, eventName, data);\n};\nfunction boardcast(eventName, data) {\n  this.$children.forEach(child => {\n    // 子元素触发$emit\n    child.$emit(eventName, data);\n    if (child.$children.length) {\n      // 递归调用，通过call修改this指向 child\n      boardcast.call(child, eventName, data);\n    }\n  });\n}\n")])])]),n("h3",{attrs:{id:"bus"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bus"}},[e._v("#")]),e._v(" bus")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class Bus {\n  constructor() {\n    // {\n    //   eventName1:[fn1,fn2],\n    //   eventName2:[fn3,fn4],\n    // }\n    this.callbacks = {};\n  }\n  $on(name, fn) {\n    this.callbacks[name] = this.callbacks[name] || [];\n    this.callbacks[name].push(fn);\n  }\n  $emit(name, args) {\n    if (this.callbacks[name]) {\n      // 存在 遍历所有callback\n      this.callbacks[name].forEach(cb => cb(args));\n    }\n  }\n}\n\nVue.prototype.$bus = new Bus();\n")])])]),n("h2",{attrs:{id:"watch-和-computed-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#watch-和-computed-的区别"}},[e._v("#")]),e._v(" watch 和 computed 的区别？")]),e._v(" "),n("p",[e._v("computed：")]),e._v(" "),n("p",[e._v("① 有缓存机制；② 不能接受参数；③ 可以依赖其他 computed，甚至是其他组件的 data；④ 不能与 data 中的属性重复")]),e._v(" "),n("p",[e._v("watch：")]),e._v(" "),n("p",[e._v("① 可接受两个参数；② 监听时可触发一个回调，并做一些事情；③ 监听的属性必须是存在的；④ 允许异步")]),e._v(" "),n("p",[e._v("watch 配置：handler、deep（是否深度）、immeditate （是否立即执行）")]),e._v(" "),n("p",[e._v("总结：")]),e._v(" "),n("p",[e._v("当有一些数据需要随着另外一些数据变化时，建议使用 computed")]),e._v(" "),n("p",[e._v("当有一个通用的响应数据变化的时候，要执行一些业务逻辑或异步操作的时候建议使用 watch")]),e._v(" "),n("h2",{attrs:{id:"杂知识"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#杂知识"}},[e._v("#")]),e._v(" 杂知识")]),e._v(" "),n("h3",{attrs:{id:"清除定时器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#清除定时器"}},[e._v("#")]),e._v(" 清除定时器")]),e._v(" "),n("p",[e._v("单页面应用，切换页面时定时器不会自动清除的，需要手动在 beforeDestroy 中销毁定时器。")]),e._v(" "),n("p",[n("strong",[e._v("bad")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("mounted(){\n this.timer = setInterval(()=>{\n    console.log(1)\n },1000)\n},\nbeforeDestroy(){\n clearInterval(this.timer)\n}\n")])])]),n("p",[e._v("引用尤大的话来说就是：")]),e._v(" "),n("p",[e._v("它需要在这个组件实例中保存这个 timer，如果可以的话最好只有生命周期钩子可以访问到它。这并不算严重的问题，但是它可以被视为杂物。")]),e._v(" "),n("p",[e._v("我们的建立代码独立于我们的清理代码，这使得我们比较难于程序化的清理我们建立的所有东西。")]),e._v(" "),n("p",[n("strong",[e._v("good")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("mounted(){\n const timer = setInterval(()=>{\n    console.log(1)\n },1000)\n this.$once('hook:beforeDestroy',()=>{\n  clearInterval(timer)\n })\n}\n")])])]),n("h3",{attrs:{id:"背景图懒加载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#背景图懒加载"}},[e._v("#")]),e._v(" 背景图懒加载")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('v-lazy:background-image="item.img"\n')])])]),n("h2",{attrs:{id:"路由"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#路由"}},[e._v("#")]),e._v(" 路由")]),e._v(" "),n("h3",{attrs:{id:"路由跳转跳页面"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#路由跳转跳页面"}},[e._v("#")]),e._v(" 路由跳转跳页面")]),e._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("goUrl")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n          path"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'SearchResult'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n          query"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n            shopId"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("6")]),e._v("\n          "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),n("h3",{attrs:{id:"回上一页"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#回上一页"}},[e._v("#")]),e._v(" 回上一页")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("this.goBack()\n\n// 兼容所有环境\nVue.prototype.goBack = () => {                      // 返回上一个页面\n  if (Vue.prototype.isGreenApp) {\n    // 通知app返回\n    let sendData = {\n      type: 'back'\n    }\n    Vue.prototype.$sendDataToClient(sendData)\n  } else if (Vue.prototype.isWxApp) {\n    window.history.go(-1)\n    // setTimeout(() => {    // 小程序跳转的页面返回\n    //   window.wx.miniProgram.navigateBack()\n    // }, 500)  会重复多返回一层\n  } else {\n    history.back()\n  }\n}\n\n// vue自带\nthis.$router.go(-1)\n")])])]),n("h2",{attrs:{id:"全屏弹窗"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#全屏弹窗"}},[e._v("#")]),e._v(" 全屏弹窗")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("### mounted\n\nwindow.addEventListener('popstate', () => {\n        if (this.showInfo) {\n          this.showInfo = false\n        }\n      })\n      \n### 点击 添加一条记录\n\nhistory.pushState(null, null, location.href)\n\n\n### 后退\n\nwindow.history.go(-1)\n")])])]),n("h2",{attrs:{id:"修饰符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#修饰符"}},[e._v("#")]),e._v(" 修饰符")]),e._v(" "),n("h3",{attrs:{id:"表单修饰符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#表单修饰符"}},[e._v("#")]),e._v(" 表单修饰符")]),e._v(" "),n("p",[n("strong",[e._v(".lazy")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<div>\n   <input type="text" v-model.lazy="value">\n   <p>{{value}}</p>\n</div>\n')])])]),n("p",[e._v("失焦才改变")]),e._v(" "),n("p",[n("strong",[e._v(".trim")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<input type="text" v-model.trim="value">\n')])])]),n("p",[e._v("只能去头尾，跟js的trim一样")]),e._v(" "),n("p",[n("strong",[e._v(".number")])]),e._v(" "),n("p",[e._v("先输入数字才会将别的过滤")]),e._v(" "),n("p",[e._v("开头不是数字就没作用")]),e._v(" "),n("h3",{attrs:{id:"事件修饰符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#事件修饰符"}},[e._v("#")]),e._v(" 事件修饰符")]),e._v(" "),n("p",[n("strong",[e._v(".stop")])]),e._v(" "),n("p",[e._v("由于事件冒泡的机制，我们给元素绑定点击事件的时候，也会触发父级的点击事件。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<div @click="shout(2)">\n  <button @click="shout(1)">ok</button>\n</div>\n\n//js\nshout(e){\n  console.log(e)\n}\n//1\n//2\n')])])]),n("p",[e._v("相当于调用了event.stopPropagation()方法。")]),e._v(" "),n("p",[n("strong",[e._v(".prevent")])]),e._v(" "),n("p",[e._v("用于阻止事件的默认行为，例如，当点击提交按钮时阻止对表单的提交。相当于调用了event.preventDefault()方法。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('\x3c!-- 提交事件不再重载页面 --\x3e\n<form v-on:submit.prevent="onSubmit"></form>\n')])])]),n("p",[e._v("**注意：**修饰符可以同时使用多个,但是可能会因为顺序而有所不同。")]),e._v(" "),n("p",[e._v("用 v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击。")]),e._v(" "),n("p",[e._v("也就是"),n("strong",[e._v("从左往右判断~")])]),e._v(" "),n("p",[n("strong",[e._v(".self")])]),e._v(" "),n("p",[e._v("只当事件是从事件绑定的元素本身触发时才触发回调。像下面所示，刚刚我们从.stop时候知道子元素会冒泡到父元素导致触发父元素的点击事件，当我们加了这个.self以后，我们点击button不会触发父元素的点击事件shout，只有当点击到父元素的时候（蓝色背景）才会shout~从这个self的英文翻译过来就是‘自己，本身’可以看出这个修饰符的用法")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<div class="blue" @click.self="shout(2)">\n  <button @click="shout(1)">ok</button>\n</div>\n')])])]),n("p",[n("strong",[e._v(".once")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('//键盘按坏都只能shout一次\n<button @click.once="shout(1)">ok</button>\n')])])]),n("p",[n("strong",[e._v(".capture")])]),e._v(" "),n("p",[e._v("从上面我们知道了事件的冒泡，其实完整的事件机制是：捕获阶段--目标阶段--冒泡阶段。\n默认的呢，是事件触发是从目标开始往上冒泡。")]),e._v(" "),n("p",[e._v("当我们加了这个.capture以后呢，我们就反过来了，事件触发从包含这个元素的顶层开始往下触发。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<div @click.capture="shout(1)">\n      obj1\n      <div @click.capture="shout(2)">\n        obj2\n        <div @click="shout(3)">\n          obj3\n          <div @click="shout(4)">\n            obj4\n          </div>\n        </div>\n      </div>\n    </div>\n    // 1 2 4 3\n')])])]),n("p",[e._v("从上面这个例子我们点击obj4的时候，就可以清楚地看出区别，obj1，obj2在捕获阶段就触发了事件，因此是先1后2，后面的obj3，obj4是默认的冒泡阶段触发，因此是先4然后冒泡到3~")]),e._v(" "),n("p",[n("strong",[e._v(".passive")])]),e._v(" "),n("p",[e._v("当我们在监听元素滚动事件的时候，会一直触发onscroll事件，在pc端是没啥问题的，但是在移动端，会让我们的网页变卡，因此我们使用这个修饰符的时候，相当于给onscroll事件整了一个.lazy修饰符")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('\x3c!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --\x3e\n\x3c!-- 而不会等待 `onScroll` 完成 --\x3e\n\x3c!-- 这其中包含 `event.preventDefault()` 的情况 --\x3e\n<div v-on:scroll.passive="onScroll">...</div>\n')])])]),n("p",[n("strong",[e._v(".native")])]),e._v(" "),n("p",[e._v("我们经常会写很多的小组件，有些小组件可能会绑定一些事件，但是，像下面这样绑定事件是不会触发的")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<My-component @click="shout(3)"></My-component>\n')])])]),n("p",[e._v("必须使用.native来修饰这个click事件（即），可以理解为该修饰符的作用就是把一个vue组件转化为一个普通的HTML标签，\n注意："),n("strong",[e._v("使用.native修饰符来操作普通HTML标签是会令事件失效的")])]),e._v(" "),n("h3",{attrs:{id:"键值修饰符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#键值修饰符"}},[e._v("#")]),e._v(" 键值修饰符")]),e._v(" "),n("p",[e._v("其实这个也算是事件修饰符的一种，因为它都是用来修饰键盘事件的。\n比如onkeyup，onkeydown啊")]),e._v(" "),n("p",[n("strong",[e._v(".keyCode")])]),e._v(" "),n("p",[e._v("如果不用keyCode修饰符，那我们每次按下键盘都会触发shout，当我们想指定按下某一个键才触发这个shout的时候，这个修饰符就有用了，具体键码查看键码对应表https://zhidao.baidu.com/question/266291349.html")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<input type="text" @keyup.keyCode="shout(4)">\n')])])]),n("p",[e._v("为了方便我们使用，vue给一些常用的键提供了别名")]),e._v(" "),n("blockquote",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//普通键.enter.tab.delete \n//(捕获“删除”和“退格”键).space.esc.up.down.left.right\n//系统修饰键.ctrl.alt.meta.shift\n")])])])]),e._v(" "),n("p",[e._v("可以通过全局 config.keyCodes 对象自定义按键修饰符别名：")]),e._v(" "),n("blockquote",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 可以使用 `v-on:keyup.f1`Vue.config.keyCodes.f1 = 112\n")])])])]),e._v(" "),n("p",[e._v("我们从上面看到，键分成了普通常用的键和系统修饰键，区别是什么呢？\n当我们写如下代码的时候,我们会发现如果"),n("strong",[e._v("仅仅")]),e._v("使用系统修饰键是无法触发keyup事件的。")]),e._v(" "),n("blockquote",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<input type="text" @keyup.ctrl="shout(4)">\n')])])])]),e._v(" "),n("p",[e._v("那该如何呢？我们需要将系统修饰键和其他键码链接起来使用，比如")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<input type="text" @keyup.ctrl.67="shout(4)">\n')])])]),n("p",[e._v("这样当我们同时按下ctrl+c时，就会触发keyup事件。\n另，如果是鼠标事件，那就可以单独使用系统修饰符。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<button @mouseover.ctrl="shout(1)">ok</button>\n <button @mousedown.ctrl="shout(1)">ok</button>\n <button @click.ctrl.67="shout(1)">ok</button>\n')])])]),n("p",[e._v("大概是什么意思呢，就是你不能"),n("strong",[e._v("单手指使用系统修饰键的修饰符")]),e._v("（最少两个手指，可以多个）。你可以一个手指按住系统修饰键一个手指按住另外一个键来实现键盘事件。也可以用一个手指按住系统修饰键，另一只手按住鼠标来实现鼠标事件。")]),e._v(" "),n("p",[n("strong",[e._v(".exact")]),e._v(" "),n("strong",[e._v("(2.5新增)")])]),e._v(" "),n("p",[e._v("我们上面说了这个系统修饰键，当我们像这样绑定了click键按下的事件，惊奇的是，我们同时按下几个系统修饰键，比如ctrl shift点击，也能触发，可能有些场景我们"),n("strong",[e._v("只需要或者只能")]),e._v("按一个系统修饰键来触发（像制作一些快捷键的时候），而当我们按下ctrl和其他键的时候则无法触发。那就这样写。")]),e._v(" "),n("p",[e._v("注意：这个"),n("strong",[e._v("只是限制系统修饰键")]),e._v("的，像下面这样书写以后你还是可以按下ctrl + c，ctrl+v或者ctrl+普通键 来触发，但是不能按下ctrl + shift +普通键来触发。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<button type="text" @click.ctrl.exact="shout(4)">ok</button>\n')])])]),n("h3",{attrs:{id:"v-bind修饰符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#v-bind修饰符"}},[e._v("#")]),e._v(" v-bind修饰符")]),e._v(" "),n("p",[n("strong",[e._v(".sync(2.3.0+ 新增)")])]),e._v(" "),n("p",[e._v("在有些情况下，我们可能需要对一个 prop 进行“双向绑定”。不幸的是，真正的双向绑定会带来维护上的问题，因为子组件可以修改父组件，且在父组件和子组件都没有明显的改动来源。我们通常的做法是")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//父组件\n<comp :myMessage.sync=\"bar\"></comp>\n//子组件\nthis.$emit('update:myMessage',params);\n")])])]),n("p",[e._v("这样确实会方便很多，但是也有很多需要注意的点")]),e._v(" "),n("p",[e._v("1、使用sync的时候，子组件传递的事件名必须为update:value，其中value必须与子组件中props中声明的名称完全一致(如上例中的myMessage，不能使用my-message)")]),e._v(" "),n("p",[e._v("2、注意带有 .sync 修饰符的 v-bind 不能和表达式一起使用 (例如 v-bind:title.sync=”doc.title + ‘!’” 是无效的)。取而代之的是，你只能提供你想要绑定的属性名，类似 v-model。")]),e._v(" "),n("p",[e._v("3将 v-bind.sync 用在一个字面量的对象上，例如 v-bind.sync=”{ title: doc.title }”，是无法正常工作的，因为在解析一个像这样的复杂表达式的时候，有很多边缘情况需要考虑。")]),e._v(" "),n("p",[n("strong",[e._v(".prop")])]),e._v(" "),n("p",[e._v("要学习这个修饰符，我们首先要搞懂两个东西的区别。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Property：节点对象在内存中存储的属性，可以访问和设置。\nAttribute：节点对象的其中一个属性( property )，值是一个对象。\n可以通过点访问法 document.getElementById('xx').attributes 或者 document.getElementById('xx').getAttributes('xx') 读取，通过 document.getElementById('xx').setAttribute('xx',value) 新增和修改。\n在标签里定义的所有属性包括 HTML 属性和自定义属性都会在 attributes 对象里以键值对的方式存在。\n")])])]),n("p",[e._v("其实attribute和property两个单词，翻译出来都是属性，但是《javascript高级程序设计》将它们翻译为特性和属性，以示区分")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('//这里的id,value,style都属于property\n//index属于attribute\n//id、title等既是属性，也是特性。修改属性，其对应的特性会发生改变；修改特性，属性也会改变\n<input id="uid" title="title1" value="1" :index="index">\n//input.index === undefined\n//input.attributes.index === this.index\n')])])]),n("p",[e._v("从上面我们可以看到如果直接使用v-bind绑定，则默认会绑定到dom节点的attribute。\n为了")]),e._v(" "),n("ul",[n("li",[e._v("通过自定义属性存储变量，避免暴露数据")]),e._v(" "),n("li",[e._v("防止污染 HTML 结构")])]),e._v(" "),n("p",[e._v("我们可以使用这个修饰符，如下")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<input id="uid" title="title1" value="1" :index.prop="index">\n//input.index === this.index\n//input.attributes.index === undefined\n')])])]),n("p",[n("strong",[e._v(".camel")])]),e._v(" "),n("p",[e._v("由于HTML 特性是不区分大小写的。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<svg :viewBox="viewBox"></svg>\n')])])]),n("p",[e._v("实际上会渲染为")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<svg viewbox="viewBox"></svg>\n')])])]),n("p",[e._v("这将导致渲染失败，因为 SVG 标签只认 viewBox，却不知道 viewbox 是什么。\n如果我们使用.camel修饰符，那它就会被渲染为驼峰名。\n另，如果你使用字符串模版，则没有这些限制。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("new Vue({\n  template: '<svg :viewBox=\"viewBox\"></svg>'\n})\n")])])]),n("h2",{attrs:{id:"vue中引入jquery插件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue中引入jquery插件"}},[e._v("#")]),e._v(" vue中引入jquery插件")]),e._v(" "),n("p",[e._v("npm安装jquery")]),e._v(" "),n("p",[e._v("在插件里import jquery，可能eslint报错，需要手改格式")]),e._v(" "),n("p",[e._v("在需要的界面import jquery 和插件，当然需要用jquery调用")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$(this.$refs.text).arctext({radius: 100})\n")])])]),n("h2",{attrs:{id:"模板"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#模板"}},[e._v("#")]),e._v(" 模板")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('\x3c!-- 商城会员卡详情页 --\x3e\n\x3c!-- Create by luozheng on 2020/03/18 --\x3e\n<style lang="less" scoped>\n  @import "../../assets/less/variable.less";\n  .container {\n    width: 100%;\n    height: 100%;\n  }\n</style>\n\n<template>\n  <div class="container overscroll">\n\n  </div>\n</template>\n\n<script>\n  export default {\n    name: \'OrderLogisticsDetail\',\n    data () {\n      return {\n      }\n    },\n    props: {\n    },\n    mounted () {\n    },\n    methods: {\n    }\n  }\n<\/script>\n')])])]),n("h2",{attrs:{id:"懒加载组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#懒加载组件"}},[e._v("#")]),e._v(" 懒加载组件")]),e._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[e._v("Masks")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'@/components/mall/Masks'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),n("h2",{attrs:{id:"异步加载组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#异步加载组件"}},[e._v("#")]),e._v(" 异步加载组件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("npm i babel-plugin-dynamic-import-node\n")])])]),n("p",[e._v("然后在.babelrc中")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('{\n  "presets": [\n    ["env", { "modules": false }],\n    "stage-2"\n  ],\n  "plugins": [\n    "transform-runtime"\n  ],\n  "comments": false,\n  "env": {\n    "test": {\n      "presets": ["env", "stage-2"],\n      "plugins": [ "istanbul" ]\n    },\n    "development": {\n      "plugins": ["dynamic-import-node"]\n    }\n  }\n}\n\n')])])]),n("p",[e._v("加在env里，直接放外层plugins，没区分环境，会导致打包出错")]),e._v(" "),n("h2",{attrs:{id:"vue跨组件传递事件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue跨组件传递事件"}},[e._v("#")]),e._v(" vue跨组件传递事件")]),e._v(" "),n("p",[e._v("a组件")]),e._v(" "),n("p",[e._v("正常方式接收")]),e._v(" "),n("p",[e._v("b组件加上")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('v-bind="$attrs"\nv-on="$listeners"\n')])])]),n("p",[e._v("c组件")]),e._v(" "),n("p",[e._v("正常发射")]),e._v(" "),n("h2",{attrs:{id:"vue-中使用echarts"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue-中使用echarts"}},[e._v("#")]),e._v(" vue 中使用echarts")]),e._v(" "),n("p",[e._v("1.npm 安装")]),e._v(" "),n("p",[e._v("2.要用的页面")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  import echarts from 'echarts'\n")])])]),n("p",[e._v("3.画")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('  <div class="charts" :style="{width: \'100%\', height: \'4rem\'}" ref="myChart"></div>\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("drawLine () {\n  // 基于准备好的dom，初始化echarts实例\n  // let myChart = echarts.init(document.getElementById('myChart'))\n  let myChart = echarts.init(this.$refs.myChart)\n  // 绘制图表\n  myChart.setOption({\n    tooltip: {\n      trigger: 'item',\n      formatter: '{a} <br/>{b}: {c} ({d}%)'\n    },\n    // 颜色指引\n    legend: {\n      orient: 'horizontal',   // vertical\n      x: 'left',\n      data: ['收入', '支出']\n    },\n    color: ['#3db657', '#bbeeaa'],\n    series: [\n      {\n        name: '数据统计',\n        type: 'pie',\n        radius: ['40%', '58%'],\n        avoidLabelOverlap: false,\n        // 图中的字\n        label: {\n          normal: {\n            show: false,\n            position: 'center'\n          }\n          // emphasis: {\n          //   show: true,\n          //   textStyle: {\n          //     fontSize: '30',\n          //     fontWeight: 'bold'\n          //   }\n          // }\n        },\n        labelLine: {\n          normal: {\n            show: true\n          }\n        },\n        data: [\n          {value: 335, name: '收入'},\n          {value: 202, name: '支出'}\n        ]\n      }\n    ]\n  })\n}\n")])])]),n("p",[e._v("要注意的是宽高得在标签里给，不然好像给不上")]),e._v(" "),n("h2",{attrs:{id:"vue-provide-inject"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue-provide-inject"}},[e._v("#")]),e._v(" vue provide/inject")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("provide () {\n  return {\n    shopId: this.shopId\n  }\n},\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("inject: ['shopId'],\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("子组件this.shopId就能拿到了\n")])])]),n("h2",{attrs:{id:"vue双向绑定原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue双向绑定原理"}},[e._v("#")]),e._v(" vue双向绑定原理")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<!DocType>\n<html>\n<title>vue 的双向绑定事件</title>\n<body id=\"app\">\n<input type=\"text\" v-model=\"number\"/>\n<span v-bind=\"number\"></span>\n<input type=\"text\" v-model=\"age\"/>\n<span v-bind=\"age\"></span>\n</body>\n\n<script>\n  function Vue (options) {\n    this._init(options)\n  }\n\n  Vue.prototype._init = function (options) {\n    this.$data = options.data\n    this.$methods = options.data.methods\n    this.$el = document.querySelector(options.el)\n    this.$methods = options.methods\n    this.$key = ''\n\n    this._binding = {}\n\n    // 观测数据\n    this._observer(this.$data)\n\n    this._complie(this.$el)\n\n    // this._test(this.$data);\n  }\n\n  // 观测数据\n  Vue.prototype._observer = function (obj) {\n    var value\n    let _this = this\n    for (key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        this._binding[key] = {\n          _directives: []\n        }\n        value = obj[key]\n        if (typeof value === 'object') {\n          this._observer(value)\n        }\n        Object.defineProperty(this.$data, key, {\n          enumerable: true,\n          configurable: true,\n          get: function () {\n            console.log(`获取${value}`, key)\n            return value\n          },\n          set: function (newVal) {\n            console.log('key:', key, _this.$key)\n            if (value !== newVal) {\n              value = newVal\n              _this._binding[_this.$key]._directives.forEach(function (item, index) {\n                item.update()\n              })\n            }\n          }\n        })\n      }\n    }\n  }\n\n  // 为DOM节点添加指令事件\n  Vue.prototype._complie = function (root) {\n    var _this = this\n    var nodes = root.children\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i]\n      if (node.children.length) {\n        this._complie(node)\n      }\n\n      if (node.hasAttribute('v-click')) {\n        node.onclick = (function () {\n          var attrVal = nodes[i].getAttribute('v-click')\n          return _this.$methods[attrVal].bind(_this.$data)\n        })()\n      }\n\n      if (node.hasAttribute('v-model') && (node.tagName == 'INPUT' || node.tagName == 'TEXTAREA')) {\n        node.addEventListener('input', (function (key) {\n          var attrVal = node.getAttribute('v-model')\n          _this._binding[attrVal]._directives.push(new Watcher(\n            'input',\n            node,\n            _this,\n            attrVal,\n            'value'\n          ))\n\n          return function () {\n            _this.$key = attrVal\n            _this.$data[attrVal] = nodes[key].value\n          }\n        })(i))\n      }\n\n      if (node.hasAttribute('v-bind')) {\n        var attrVal = node.getAttribute('v-bind')\n        _this._binding[attrVal]._directives.push(new Watcher(\n          'text',\n          node,\n          _this,\n          attrVal,\n          'innerHTML'\n        ))\n      }\n    }\n  }\n\n  function Watcher (name, el, vm, exp, attr) {\n    this.name = name         //指令名称，例如文本节点，该值设为\"text\"\n    this.el = el             //指令对应的DOM元素\n    this.vm = vm             //指令所属myVue实例\n    this.exp = exp           //指令对应的值，本例如\"number\"\n    this.attr = attr         //绑定的属性值，本例为\"innerHTML\"\n\n    this.update()\n  }\n\n  // 更新数据\n  Watcher.prototype.update = function () {\n    this.el[this.attr] = this.vm.$data[this.exp]\n  }\n\n  // 测试\n  Vue.prototype._test = function ($data) {\n    var a = $data.number\n    $data.number = 32\n  }\n\n  window.onload = function () {\n    var app = new Vue({\n      el: '#app',\n      data: {\n        number: 12,\n        age: 444\n      },\n      methods: {}\n    })\n  }\n\n<\/script>\n</html>\n")])])]),n("h2",{attrs:{id:"vuex"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vuex"}},[e._v("#")]),e._v(" vuex")]),e._v(" "),n("p",[e._v("获取state中的值")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import {mapState} from 'vuex'\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("computed: {\n  ...mapState(['isToastShow', 'toastText'])\n}\n直接就获取并赋值了\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import {mapActions} from 'vuex'\n\nmethods: mapActions([\n    'method1',\n    'method2'\n])\n\nmethods:{\n    ...mapActions([\n        'method1',\n        'method2'\n    ])\n} \n")])])]),n("p",[e._v("modules 多个vuex")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import x1 ..\n\nexport default new Vuex.Store({\n\n  modules: {\n\n    x1,\n\n    x2\n\n  }\n\n})\n\n")])])]),n("p",[e._v("x1")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const state =  {\n\n  },\n  mutations =  {\n\n  },\n  actions =  {\n\n  }\n  \n  export default {\n  namespace: true\n      state,\n      ..\n  }\n")])])]),n("h4",{attrs:{id:"改变值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#改变值"}},[e._v("#")]),e._v(" 改变值")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("mutations中加一方法去改变state\n\n调用\nthis.$store.commit('method')\n")])])]),n("p",[e._v("dispatch操作action里的")]),e._v(" "),n("h2",{attrs:{id:"前端路由实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前端路由实现"}},[e._v("#")]),e._v(" 前端路由实现")]),e._v(" "),n("p",[e._v("刚开始是后端路由，服务端当接收到客户端发来的HTTP请求，就会根据所请求的相应URL，来找到相应的映射函数，然后执行该函数，并将函数的返回值发送给客户端，对于最简单的静态资源服务器，可以认为，所有URL的映射函数就是一个文件读取操作。对于动态资源，映射函数可能是一个数据库读取操作，也可能是进行一些数据的处理，等等。然后根据这些读取的数据，在服务器端就使用相应的模板来对页面进行渲染后，再返回渲染完毕的页面。这种方式在早期的前端开发中非常普遍，它的好处与坏处都很明显：")]),e._v(" "),n("ul",[n("li",[e._v("好处：安全性好，SEO好。")]),e._v(" "),n("li",[e._v("缺点：加大服务器的压力，不利于用户体验，代码冗合。")])]),e._v(" "),n("p",[e._v("前端路由主要有以下两种实现方案：")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("hash")])]),e._v(" "),n("li",[n("p",[e._v("history API")])])]),e._v(" "),n("h3",{attrs:{id:"基于hash"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基于hash"}},[e._v("#")]),e._v(" 基于hash")]),e._v(" "),n("p",[e._v("早期的前端路由的实现就是基于location.hash来实现的。其实现原理也很简单，location.hash的值就是URL中#后面的内容。比如下面这个网站，它的location.hash='#me'：")]),e._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"https://www.srtian.com/#me",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.srtian.com#me"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("此外，hash也存在下面几个特性：")]),e._v(" "),n("ul",[n("li",[e._v("URL中hash值只是客户端的一种状态，也就是说当向服务器端发出请求时，hash部分不会被发送。")]),e._v(" "),n("li",[e._v("hash值的改变，都会在浏览器的访问历史中增加一个记录。因此我们能通过浏览器的回退、前进按钮控制hash的切换。")]),e._v(" "),n("li",[e._v("我们可以使用hashchange事件来监听hash的变化。")])]),e._v(" "),n("p",[e._v("触发hash变化的方式也有两种，一种是通过a标签，并设置href属性，当用户点击这个标签后，URL就会发生改变，也就会触发hashchange事件了：")]),e._v(" "),n("div",{staticClass:"language-html extra-class"},[n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("a")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("href")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("#srtian"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("srtian"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("a")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n")])])]),n("p",[e._v("还有一种方式就是直接使用JavaScript来对loaction.hash进行赋值，从而改变URL，触发hashchange事件：")]),e._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[e._v("location"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("hash"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"#srtian"')]),e._v("\n")])])]),n("h3",{attrs:{id:"基于history-api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基于history-api"}},[e._v("#")]),e._v(" 基于History API")]),e._v(" "),n("p",[e._v("前面的hash虽然也很不错，但使用时都需要加上#，并不是很美观。因此到了HTML5，又提供了History API来实现URL的变化。其中做最主要的API有以下两个：history.pushState()和history.repalceState()。")]),e._v(" "),n("p",[e._v("这两个API可以在不进行刷新的情况下，操作浏览器的历史纪录。唯一不同的是，前者是新增一个历史记录，后者是直接替换当前的历史记录。此外，这两个api都接受三个参数：")]),e._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[e._v("window"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("history"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("pushState")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"http://www.163.com"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),n("ul",[n("li",[e._v("状态对象（state object）：一个JavaScript对象，与用pushState()方法创建的新历史记录条目关联。无论何时用户导航到新创建的状态，会触发popstate事件，并能在事件中使用该对象。")]),e._v(" "),n("li",[e._v("标题（title）：一般浏览器会忽略，最好传入null。")]),e._v(" "),n("li",[e._v("地址（URL）：就是需要新增的历史记录的地址，浏览器不会去直接加载改地址，但后面也可能会去尝试加载该地址。此外需要注意的是，传入的URL与当前URL应该是同源的。")])]),e._v(" "),n("p",[e._v("此外，还提供了popstate事件来监听历史记录的变化。")]),e._v(" "),n("div",{staticClass:"language-html extra-class"},[n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[e._v("window.addEventListener('popstate',function(e){\n        var state = e.state\n        mainbox.innerHTML = 'current page is ' + state.title\n    })\n")])])]),n("p",[e._v("两种实现方式的对比：基于Hash的路由实现，兼容性更好；而基于History API的路由，则更正式，更美观，可以设置与当前URL同源的任意URL，路径更直观。此外，基于Hash的路由不需要对服务器做改动，基于History API的路由需要对服务器做一些改造，需要对不同的路由进行相应的设置才行。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/4116027-606686d3756f6093.png?imageMogr2/auto-orient/strip%7CimageView2/2/format/webp",alt:"img"}})]),e._v(" "),n("h2",{attrs:{id:"checkbox"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#checkbox"}},[e._v("#")]),e._v(" checkbox")]),e._v(" "),n("p",[e._v("可直接用v-model绑定true false")]),e._v(" "),n("h2",{attrs:{id:"this-parent-emit-xx"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#this-parent-emit-xx"}},[e._v("#")]),e._v(" this.$parent.emit('xx')")]),e._v(" "),n("p",[e._v("this.$on('xx', method)")]),e._v(" "),n("h2",{attrs:{id:"router"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#router"}},[e._v("#")]),e._v(" router")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("{\n      path: '/about/:id',\n      name: 'about',\n      props: true,\n}\n")])])]),n("p",[e._v("页面中用props接收id就可以了")]),e._v(" "),n("p",[e._v("用name跳转")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<router-link :to=\"{name: 'about'}\">About</router-link>\n")])])]),n("p",[e._v("多视图")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("{\n      path: '/home',\n      name: 'home',\n      components: {\n        default: Home,\n        aa: Test\n      }\n    },\n    \n    \n    <router-view/>\n    <router-view name=\"aa\"/>\n")])])]),n("h3",{attrs:{id:"全局守卫"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#全局守卫"}},[e._v("#")]),e._v(" 全局守卫")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("router.beforeEach((to, from, next) => {\n// 判断登陆状态什么的\n结束了都要调next，不然走不下去\n})\n\nrouter.beforeResolve((to, from, next) => {\n\n})\n\nrouter.afterEach((to, from, next) => {\n\n})\n\n")])])]),n("h3",{attrs:{id:"路由独享守卫"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#路由独享守卫"}},[e._v("#")]),e._v(" 路由独享守卫")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("{\n    path: '',\n    component: '',\n    beforeEnter: (to, from, next) => {\n        \n    }\n}\n")])])]),n("h3",{attrs:{id:"组件内"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组件内"}},[e._v("#")]),e._v(" 组件内")]),e._v(" "),n("p",[e._v("beforeRouteEnter(to, from, next) {}")]),e._v(" "),n("p",[e._v("beforeRouteupdate(to, from, next) {}")]),e._v(" "),n("p",[e._v("beforeRouteLeave(to, from, next) {}")]),e._v(" "),n("h3",{attrs:{id:"异步组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#异步组件"}},[e._v("#")]),e._v(" 异步组件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("{\n    path: 'x',\n    component: () => import('./x/x')\n}\n")])])]),n("h3",{attrs:{id:"route"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#route"}},[e._v("#")]),e._v(" route")]),e._v(" "),n("ul",[n("li",[e._v("$route.path\n字符串，等于当前路由对象的路径，会被解析为绝对路径，如 "),n("code",[e._v('"/home/news"')]),e._v(" 。")]),e._v(" "),n("li",[e._v("$route.params\n对象，包含路由中的动态片段和全匹配片段的键值对")]),e._v(" "),n("li",[e._v("$route.query\n对象，包含路由中查询参数的键值对。例如，对于 "),n("code",[e._v("/home/news/detail/01?favorite=yes")]),e._v(" ，会得到"),n("code",[e._v("$route.query.favorite == 'yes'")]),e._v(" 。")]),e._v(" "),n("li",[e._v("$route.router\n路由规则所属的路由器（以及其所属的组件）。")]),e._v(" "),n("li",[e._v("$route.matched\n数组，包含当前匹配的路径中所包含的所有片段所对应的配置参数对象。")]),e._v(" "),n("li",[e._v("$route.name\n当前路径的名字，如果没有使用具名路径，则名字为空。")])]),e._v(" "),n("h2",{attrs:{id:"nuxt-js"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nuxt-js"}},[e._v("#")]),e._v(" nuxt.js")]),e._v(" "),n("p",[e._v("npx create-nuxt-app test")]),e._v(" "),n("p",[e._v("npm i @nuxtjs/axios")]),e._v(" "),n("h2",{attrs:{id:"settimeout-nexttick区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#settimeout-nexttick区别"}},[e._v("#")]),e._v(" setTimeout  $nextTick区别")]),e._v(" "),n("p",[e._v("setTimeout(fn, 20) 比 $nextTick 更往后， $nextTick 约等于 setTimeout(fn, 0)。 在实际项目中在一些低端的 android 手机遇到过 $nextTick 的问题，用 setTimeout(fn, 20) 最稳妥。")]),e._v(" "),n("p",[e._v("Vue 在内部对异步队列尝试使用原生的 Promise.then 、 MutationObserver 和 setImmediate ， 如果执行环境不支持，则会采用 setTimeout(fn, 0) 代替。")]),e._v(" "),n("h2",{attrs:{id:"mixin"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mixin"}},[e._v("#")]),e._v(" mixin")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("export const addMediaMixin = {\n\tdata () {\n\t\treturn {\n\t\t\txxx\n\t\t}\n\t},\n\txxx 写法同vue\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import {addMediaMixin} from '@/components/Mixins/AddMediaMixin'\n\nmixins: [addMediaMixin],\n")])])]),n("h2",{attrs:{id:"利用双向绑定"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#利用双向绑定"}},[e._v("#")]),e._v(" 利用双向绑定")]),e._v(" "),n("p",[e._v("v-model个值")]),e._v(" "),n("p",[e._v("子组件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("model: {\n      prop: 'curNav',\n      event: 'changeNav'\n    },\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("props: {\n      curNav: {\n        type: Number,\n        default: 0\n      }\n    },\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("changeNav (index) {\n        this.$emit('changeNav', index)\n      }\n")])])]),n("h2",{attrs:{id:"直接改变prop值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#直接改变prop值"}},[e._v("#")]),e._v(" 直接改变prop值")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(':startTime.sync="startDate"\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("this.$emit('update:startTime', this.start)\n")])])]),n("h2",{attrs:{id:"render"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#render"}},[e._v("#")]),e._v(" render")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Vue.component('anchored-heading', {\n  render: function (createElement) {\n    return createElement(\n      'h' + this.level,   // 标签名称\n      this.$slots.default // 子节点数组\n    )\n  },\n  props: {\n    level: {\n      type: Number,\n      required: true\n    }\n  }\n})\n")])])]),n("p",[e._v("用组件写的话去掉template")]),e._v(" "),n("h3",{attrs:{id:"跳同一页面刷新问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#跳同一页面刷新问题"}},[e._v("#")]),e._v(" 跳同一页面刷新问题")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("watch\n$route (to, from) {\n  // 执行数据更新查询\n  this.itemId = this.getQueryString('itemId')\n  this.initData()\n}\n")])])]),n("h2",{attrs:{id:"全局注册filter"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#全局注册filter"}},[e._v("#")]),e._v(" 全局注册filter")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import * as filter from './assets/js/filter'Object.keys(filter).forEach(key => {  Vue.filter(key, filter[key])})\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 价格最多保留两位，是0则去掉\nconst priceNormal2 = price => {\n  const num = +price\n  if (!isNaN(num)) {\n    return parseFloat(num.toFixed(2))\n  } else {\n    return 0\n  }\n}\n\nconst priceNormal0 = price => {\n  const num = +price\n  if (!isNaN(num)) {\n    return num.toFixed(0)\n  } else {\n    return 0\n  }\n}\n\nexport {\n  priceNormal2,\n  priceNormal0\n}\n\n\n")])])]),n("h2",{attrs:{id:"prop校验"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#prop校验"}},[e._v("#")]),e._v(" prop校验")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("mode: {\n        type: String,\n        default: '',\n        validator: function (value) {\n          // 这个值必须匹配下列字符串中的一个\n          return ['', 'light', 'line', 'error'].indexOf(value) !== -1\n        }\n      }\n")])])]),n("h2",{attrs:{id:"视频插件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#视频插件"}},[e._v("#")]),e._v(" 视频插件")]),e._v(" "),n("p",[e._v("vue-video-player")]),e._v(" "),n("h2",{attrs:{id:"复制插件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#复制插件"}},[e._v("#")]),e._v(" 复制插件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('v-clipboard:copy="recommendReason"\nv-clipboard:success="onCopySuccess"\n')])])]),n("h2",{attrs:{id:"项目增加环境判断"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#项目增加环境判断"}},[e._v("#")]),e._v(" 项目增加环境判断")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('package.json 命令中加  cross-env NODE_ENV=dev\n\n判断\nprocess.env.NODE_ENV === "development"\n\n原理\n在项目的 config 文件夹下有 dev.env.js 和 prod.env.js 两个文件，它们分别配置开发环境的变量和生产环境的变量。\n<<<<<<< HEAD\n')])])]),n("h2",{attrs:{id:"watch"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#watch"}},[e._v("#")]),e._v(" watch")]),e._v(" "),n("p",[e._v("deep")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("scheduleList: {\n  handler () {\n    console.log(1)\n  },\n  deep: true\n}\n")])])]),n("h2",{attrs:{id:"生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[e._v("#")]),e._v(" 生命周期")]),e._v(" "),n("p",[e._v("vue生命周期总共分为8个阶段创建前/后，载入前/后，更新前/后，销毁前/后。")]),e._v(" "),n("blockquote",[n("p",[e._v("创建前/后：在beforeCreated阶段，vue实例的挂载元el还没有。")])]),e._v(" "),n("blockquote",[n("p",[e._v("载入前/后：在beforeMount阶段，vue实例的$el和data都初始化了，但还是挂载之前为虚拟的dom节点，data.message还未替换。在mounted阶段，vue实例挂载完成，data.message成功渲染。")])]),e._v(" "),n("blockquote",[n("p",[e._v("更新前/后：当data变化时，会触发beforeUpdate和updated方法。")])]),e._v(" "),n("blockquote",[n("p",[e._v("销毁前/后：在执行destroy方法后，对data的改变不会再触发周期函数，说明此时vue实例已经解除了事件监听以及和dom的绑定，但是dom结构依然存在。")])]),e._v(" "),n("h3",{attrs:{id:"双向数据绑定原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#双向数据绑定原理"}},[e._v("#")]),e._v(" 双向数据绑定原理")]),e._v(" "),n("p",[e._v("vue.js 是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。")]),e._v(" "),n("p",[e._v("具体步骤：")]),e._v(" "),n("blockquote",[n("p",[e._v("第一步：需要observe的数据对象进行递归遍历，包括子属性对象的属性，都加上 setter和getter。这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化")])]),e._v(" "),n("blockquote",[n("p",[e._v("第二步：compile解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图")])]),e._v(" "),n("blockquote",[n("p",[e._v("第三步：Watcher订阅者是Observer和Compile之间通信的桥梁，主要做的事情是:")])]),e._v(" "),n("blockquote",[n("p",[e._v("1、在自身实例化时往属性订阅器(dep)里面添加自己")])]),e._v(" "),n("blockquote",[n("p",[e._v("2、自身必须有一个update()方法")])]),e._v(" "),n("blockquote",[n("p",[e._v("3、待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调，则功成身退。")])]),e._v(" "),n("blockquote",[n("p",[e._v("第四步：MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -> 视图更新；视图交互变化(input) -> 数据model变更的双向绑定效果。")])]),e._v(" "),n("h2",{attrs:{id:"template编译的理解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#template编译的理解"}},[e._v("#")]),e._v(" template编译的理解")]),e._v(" "),n("p",[e._v("简而言之，就是先转化成AST树，再得到的render函数返回VNode（Vue的虚拟DOM节点）")]),e._v(" "),n("p",[e._v("详情步骤：")]),e._v(" "),n("blockquote",[n("p",[e._v("首先，通过compile编译器把template编译成AST语法树（abstract syntax tree 即 源代码的抽象语法结构的树状表现形式），compile是createCompiler的返回值，createCompiler是用以创建编译器的。另外compile还负责合并option。")])]),e._v(" "),n("blockquote",[n("p",[e._v("然后，AST会经过generate（将AST语法树转化成render funtion字符串的过程）得到render函数，render的返回值是VNode，VNode是Vue的虚拟DOM节点，里面有（标签名、子节点、文本等等）")])]),e._v(" "),n("h2",{attrs:{id:"事件和v-model的实现原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#事件和v-model的实现原理"}},[e._v("#")]),e._v(" "),n("strong",[e._v("事件和v-model的实现原理")])]),e._v(" "),n("h2",{attrs:{id:"slot-keep-alive-内置组件的实现原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#slot-keep-alive-内置组件的实现原理"}},[e._v("#")]),e._v(" "),n("strong",[e._v("slot & keep-alive: 内置组件的实现原理")])]),e._v(" "),n("h2",{attrs:{id:"transition-过渡的实现原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#transition-过渡的实现原理"}},[e._v("#")]),e._v(" "),n("strong",[e._v("transition: 过渡的实现原理")])]),e._v(" "),n("h2",{attrs:{id:"vue-router-官方路由的实现原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue-router-官方路由的实现原理"}},[e._v("#")]),e._v(" "),n("strong",[e._v("vue-router: 官方路由的实现原理")])]),e._v(" "),n("p",[e._v("简易版")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import Home from "./views/Home";\nimport About from "./views/About";\nimport Vue from "vue";\n\nclass VueRouter {\n  constructor(options) {\n    this.$options = options;\n    this.routeMap = {};\n\n    // 路由响应式\n    this.app = new Vue({\n      data: {\n        current: "/"\n      }\n    });\n  }\n\n  init() {\n    this.bindEvents(); //监听url变化\n    this.createRouteMap(this.$options); //解析路由配置\n    this.initComponent(); // 实现两个组件\n  }\n\n  bindEvents() {\n    window.addEventListener("load", this.onHashChange.bind(this));\n    window.addEventListener("hashchange", this.onHashChange.bind(this));\n  }\n  onHashChange() {\n    this.app.current = window.location.hash.slice(1) || "/";\n  }\n  createRouteMap(options) {\n    options.routes.forEach(item => {\n      this.routeMap[item.path] = item.component;\n    });\n  }\n  initComponent() {\n    // router-link,router-view\n    // <router-link to="">fff</router-link>\n    Vue.component("router-link", {\n      props: { to: String },\n      render(h) {\n        // h(tag, data, children)\n        return h("a", { attrs: { href: "#" + this.to } }, [\n          this.$slots.default\n        ]);\n      }\n    });\n\n    // <router-view></router-view>\n    Vue.component("router-view", {\n      render: h => {\n        console.log(this.routeMap[this.app.current]);\n        const comp = this.routeMap[this.app.current];\n        return h(comp);\n      }\n    });\n  }\n}\nVueRouter.install = function(Vue) {\n  // 混入\n  Vue.mixin({\n    beforeCreate() {\n      // this是Vue实例\n      if (this.$options.router) {\n        // 仅在根组件执行一次\n        Vue.prototype.$router = this.$options.router;\n        this.$options.router.init();\n      }\n    }\n  });\n};\n\nVue.use(VueRouter);\n\nexport default new VueRouter({\n  routes: [{ path: "/", component: Home }, { path: "/about", component: About }]\n});\n\n')])])]),n("p",[e._v("同理可类推出动态组件"),n("code",[e._v("component")]),e._v("实现原理")]),e._v(" "),n("p",[e._v("在当前实例的注册组件中找到is传递的组件名对应的组件，再用render函数一调就完事了")]),e._v(" "),n("h2",{attrs:{id:"vuex-官方状态管理的实现原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vuex-官方状态管理的实现原理"}},[e._v("#")]),e._v(" "),n("strong",[e._v("vuex: 官方状态管理的实现原理")])]),e._v(" "),n("p",[e._v("简易版")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let Vue;\n\nclass Store {\n  constructor(options) {\n    this.state = new Vue({\n      data: options.state\n    });\n\n    this.mutations = options.mutations;\n    this.actions = options.actions;\n\n    options.getters && this.handleGetters(options.getters)\n  }\n\n  // 声明为箭头函数，why？\n  commit = (type, arg) => {\n    this.mutations[type](this.state, arg);\n  };\n\n  dispatch(type, arg) {\n    this.actions[type]({\n      commit: this.commit,\n      state: this.state\n    }, arg);\n  }\n\n  handleGetters(getters) {\n    this.getters = {};\n    // 遍历getters所有key\n    Object.keys(getters).forEach(key => {\n        // 为this.getters定义若干属性，这些属性是只读的\n        // $store.getters.score\n        Object.defineProperty(this.getters, key, {\n            get: () => {\n                return getters[key](this.state);\n            }\n        })\n    })\n  }\n}\n\nfunction install(_Vue) {\n  Vue = _Vue;\n\n  Vue.mixin({\n    beforeCreate() {\n      if (this.$options.store) {\n        Vue.prototype.$store = this.$options.store;\n      }\n    }\n  });\n}\n\nexport default { Store, install };\n\n")])])]),n("h2",{attrs:{id:"简易版vue"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简易版vue"}},[e._v("#")]),e._v(" 简易版vue")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// new KVue({\n//     data: {\n//         msg: 'hello'\n//     }\n// })\n\nclass KVue {\n  constructor(options) {\n    this.$options = options;\n\n    this.$data = options.data;\n    // 响应化\n    this.observe(this.$data);\n\n    // 测试代码\n    // new Watcher(this, 'test');\n    // this.test;\n\n    // 创建编译器\n    new Compile(options.el, this);\n\n    if (options.created) {\n        options.created.call(this);\n    }\n  }\n\n  // 递归遍历，使传递进来的对象响应化\n  observe(value) {\n    if (!value || typeof value !== \"object\") {\n      return;\n    }\n\n    // 遍历\n    Object.keys(value).forEach(key => {\n      // 对key做响应式处理\n      this.defineReactive(value, key, value[key]);\n      this.proxyData(key);\n    });\n  }\n\n  // 在vue根上定义属性代理data中的数据\n  proxyData(key) {\n    Object.defineProperty(this, key, {\n      get() {\n        return this.$data[key];\n      },\n      set(newVal) {\n        this.$data[key] = newVal;\n      }\n    });\n  }\n  //\n  defineReactive(obj, key, val) {\n    // 递归\n    this.observe(val);\n\n    // 创建Dep实例：Dep和key一对一对应\n    const dep = new Dep();\n\n    // 给obj定义属性\n    Object.defineProperty(obj, key, {\n      get() {\n        // 将Dep.target指向的Watcher实例加入到Dep中\n        Dep.target && dep.addDep(Dep.target);\n        return val;\n      },\n      set(newVal) {\n        if (newVal !== val) {\n          val = newVal;\n          dep.notify();\n        }\n      }\n    });\n  }\n}\n\n// Dep:管理若干watcher实例，它和key一对一关系\nclass Dep {\n  constructor() {\n    this.deps = [];\n  }\n\n  addDep(watcher) {\n    this.deps.push(watcher);\n  }\n\n  notify() {\n    this.deps.forEach(watcher => watcher.update());\n  }\n}\n\n// 保存ui中依赖，实现update函数可以更新之\nclass Watcher {\n  constructor(vm, key, cb) {\n    this.vm = vm;\n    this.key = key;\n    this.cb = cb;\n\n    // 将当前实例指向Dep.target\n    Dep.target = this;\n    this.vm[this.key];// 读一次key触发getter\n    Dep.target = null;\n  }\n\n  update() {\n      this.cb.call(this.vm, this.vm[this.key])\n    // console.log(`${this.key}属性更新了`);\n  }\n}\n\n")])])]),n("p",[e._v("compile")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 遍历模板，将里面的插值表达式处理\n// 另外如果发现k-xx, @xx做特别处理\nclass Compile {\n  constructor(el, vm) {\n    this.$vm = vm;\n    this.$el = document.querySelector(el);\n\n    if (this.$el) {\n      // 1.$el中的内容搬家到一个fragment，提高操作效率\n      this.$fragment = this.node2Fragment(this.$el);\n      //   console.log(this.$fragment);\n\n      // 2.编译fragment\n      this.compile(this.$fragment);\n      //   console.log(this.$fragment);\n\n      // 3.将编译结果追加至宿主中\n      this.$el.appendChild(this.$fragment);\n    }\n  }\n\n  //   遍历el,把里面内容搬到新创建fragment中\n  node2Fragment(el) {\n    const fragment = document.createDocumentFragment();\n    let child;\n    while ((child = el.firstChild)) {\n      // 由于appenChild是移动操作\n      fragment.appendChild(child);\n    }\n    return fragment;\n  }\n\n  //   把动态值替换，把指令和事件做处理\n  compile(el) {\n    // 遍历el\n    const childNodes = el.childNodes;\n    Array.from(childNodes).forEach(node => {\n      if (this.isElement(node)) {\n        // console.log("编译元素：" + node.nodeName);\n\n        // 如果是元素节点，我们要处理指令k-xx，事件@xx\n        this.compileElement(node);\n      } else if (this.isInterpolation(node)) {\n        // console.log("编译文本：" + node.textContent);\n        this.compileText(node);\n      }\n\n      //   递归子元素\n      if (node.childNodes && node.childNodes.length > 0) {\n        this.compile(node);\n      }\n    });\n  }\n\n  isElement(node) {\n    return node.nodeType === 1;\n  }\n  //   插值表达式判断\n  isInterpolation(node) {\n    //   需要满足{{xx}}\n    return node.nodeType === 3 && /\\{\\{(.*)\\}\\}/.test(node.textContent);\n  }\n\n  compileElement(node) {\n    // 查看node的特性中是否有k-xx，@xx\n    const nodeAttrs = node.attributes;\n    Array.from(nodeAttrs).forEach(attr => {\n      // 获取属性名称和值 k-text="abc"\n      const attrName = attr.name; // k-text\n      const exp = attr.value; // abc\n      // 指令：k-xx\n      if (attrName.indexOf("k-") === 0) {\n        const dir = attrName.substring(2); // text\n        // 执行指令\n        this[dir] && this[dir](node, this.$vm, exp);\n      } else if(attrName.indexOf(\'@\') === 0) {\n          // 事件 @click="handlClick"\n          const eventName = attrName.substring(1); // click\n          this.eventHandler(node, this.$vm, exp, eventName);\n\n      }\n    });\n  }\n  text(node, vm, exp) {\n    this.update(node, vm, exp, "text");\n  }\n\n  //   双向数据绑定\n  model(node, vm, exp) {\n    // update是数据变了改界面\n    this.update(node, vm, exp, "model");\n    // 界面变了改数值\n    node.addEventListener("input", e => {\n      vm[exp] = e.target.value;\n    });\n  }\n\n  modelUpdator(node, value) {\n    node.value = value;\n  }\n\n  html(node, vm, exp) {\n    this.update(node, vm, exp, "html");\n  }\n  htmlUpdator(node, value) {\n    node.innerHTML = value;\n  }\n\n  eventHandler(node, vm, exp, eventName){\n    // 获取回调函数\n    const fn = vm.$options.methods && vm.$options.methods[exp];\n    if(eventName && fn) {\n        node.addEventListener(eventName, fn.bind(vm))\n    }\n  }\n\n  //   把插值表达式替换为实际内容\n  compileText(node) {\n    // {{xxx}}\n    // RegExp.$1是匹配分组部分\n    // console.log(RegExp.$1);\n\n    const exp = RegExp.$1;\n    this.update(node, this.$vm, exp, "text");\n  }\n\n  // 编写update函数，它可复用\n  // exp是表达式， dir是具体操作：text,html,model\n  update(node, vm, exp, dir) {\n    const fn = this[dir + "Updator"];\n    fn && fn(node, vm[exp]);\n    // 创建Watcher\n    // new Vue({\n    //     data: {\n    //         xxx: \'bla\'\n    //     }\n    // })\n    // exp就是xxx\n    new Watcher(vm, exp, function() {\n      fn && fn(node, vm[exp]);\n    });\n  }\n\n  textUpdator(node, value) {\n    node.textContent = value;\n  }\n}\n\n')])])]),n("h2",{attrs:{id:"流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#流程"}},[e._v("#")]),e._v(" 流程")]),e._v(" "),n("p",[e._v("判断环境用不同的包解析")]),e._v(" "),n("p",[e._v("浏览器环境下$mount，判断有没写render，没有就看template，template也没有就拿el")]),e._v(" "),n("p",[e._v("然后将template转为render，执行mount")]),e._v(" "),n("p",[e._v("$mount核心-》mountComponent")]),e._v(" "),n("p",[e._v("定义更新函数updateComponent，再用watcher执行一次更新函数，完成挂载")]),e._v(" "),n("p",[e._v("触发钩子 callHook(vm, 'beforeUpdate')")]),e._v(" "),n("p",[e._v("core/index定义全局api")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("initGlobalAPI\nset delete nexttick use mixin extend等\n\n")])])]),n("p",[e._v("再看instance/index")]),e._v(" "),n("p",[e._v("终于找到vue构造函数")]),e._v(" "),n("p",[e._v("上来先_init，定义在initMixin")]),e._v(" "),n("p",[n("strong",[e._v("initMixin")])]),e._v(" "),n("p",[e._v("给_uid")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\tinitLifecycle(vm)\n\t把组件实例里面用到的常用属性初始化，比如$parent/$root/$children\n\n    initEvents(vm)\n    父组件中定义的需要子组件处理的事件\n\n    initRender(vm)\n    $slots $scopedSlots初始化 \n    $createElement函数声明\n\t$attrs和$listeners响应化\n\n    callHook(vm, 'beforeCreate')\n    \n    initInjections(vm) // resolve injections before data/props\n    \n    initState(vm)\n    执行各种数据状态初始化地方，包括数据响应化等等\n    顺序 props methods data computed watch\n    \n    initProvide(vm) // resolve provide after data/props\n    \n    callHook(vm, 'created')\n")])])]),n("h2",{attrs:{id:"虚拟dom"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#虚拟dom"}},[e._v("#")]),e._v(" 虚拟dom")]),e._v(" "),n("p",[e._v("template解析成ast")]),e._v(" "),n("p",[e._v("ast优化：判断静态节点等")]),e._v(" "),n("p",[e._v("转vnode")]),e._v(" "),n("p",[e._v("vnode过程：")]),e._v(" "),n("p",[e._v("根据tag类型判断是html还是组件，都不是就是文本")]),e._v(" "),n("p",[e._v("再判断子元素的类型，判断是不是数组（分单个、多个、空），不是数组认为是文本类型，返回文本的vnode格式")]),e._v(" "),n("p",[e._v("最后返回")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("flags,\t\t\t\t\t// 父节点类型\ntag,\t\t\t\t\t// 父节点标签名\ndata,\t\t\t\t\t// 父节点上绑定的属性、事件等\nkey: data && data.key,\t\t\t\t\t// 父节点上的key，用来diff\nchildren,\t\t\t\t\t// 子元素\nchildFlags,\t\t\t\t// 子元素类型\nel: null          // 真实dom\n")])])]),n("p",[e._v("然后走render生成dom")]),e._v(" "),n("p",[e._v("判断传进来的根节点有没vnode，没有则是首次创建，直接调用mount，有则走patch")]),e._v(" "),n("p",[e._v("mount")]),e._v(" "),n("p",[e._v("判断vnode类型，html和文字（简易版，未做组件）")]),e._v(" "),n("p",[e._v("文字")]),e._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("mountText")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("vnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" container")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" el "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" document"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("createTextNode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("vnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("children"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  vnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("el "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" el\n  container"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("appendChild")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("el"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),n("p",[e._v("html")]),e._v(" "),n("p",[e._v("创建元素")]),e._v(" "),n("p",[e._v("有属性事件就去循环加上")]),e._v(" "),n("p",[e._v("有子元素就mount")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function mountElement(vnode, container, refNode) {\n  const el = document.createElement(vnode.tag)\n  vnode.el = el\n  const data = vnode.data\n  if (data) {\n    for (let key in data) {\n      patchData(el, key, null, data[key])\n    }\n  }\n\n  const childFlags = vnode.childFlags\n  const children = vnode.children\n  if (childFlags !== ChildTypes.EMPTY) {\n    if (childFlags == ChildTypes.SINGLE) {\n      mount(children, el)\n    } else if (childFlags  == ChildTypes.MULTIPLE) {\n      for (let i = 0; i < children.length; i++) {\n        mount(children[i], el)\n      }\n    }\n  }\n  refNode ? container.insertBefore(el, refNode) : container.appendChild(el)\n}\n")])])]),n("p",[e._v("patchData")]),e._v(" "),n("p",[e._v("style循环加上、class加上，添加事件，attribute等")]),e._v(" "),n("p",[e._v("再来看更新patch")]),e._v(" "),n("p",[e._v("判断类型，")]),e._v(" "),n("ol",[n("li",[e._v("不一样 直接删了旧的重新mount")]),e._v(" "),n("li",[e._v("再将新的分成html和text两种进行比较")])]),e._v(" "),n("p",[e._v("文本")]),e._v(" "),n("p",[e._v("将新的el等于旧的el，再比较文本是否一样，不一样则el.nodeValue=新的value")]),e._v(" "),n("p",[e._v("元素")]),e._v(" "),n("ol",[n("li",[e._v("标签不同直接删了旧的重新mount")]),e._v(" "),n("li",[e._v("有新的属性、事件就去更新，旧的没有的就删掉")]),e._v(" "),n("li",[e._v("再比较子元素")])]),e._v(" "),n("p",[e._v("分九种")]),e._v(" "),n("p",[e._v("旧单节点 ：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("新单：直接再走patch\n新空：移除元素\n新多节点：旧的移除，新的循环mount\n")])])]),n("p",[e._v("旧空：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("新单：直接mount\n新空：无操作\n新多：循环mount\n")])])]),n("p",[e._v("旧多：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("新单：循环移除旧的，mount新的\n新空：循环移除旧的\n新多：重点\n")])])]),n("p",[e._v("旧多新多：")]),e._v(" "),n("p",[e._v("简易版")]),e._v(" "),n("p",[e._v("新旧循环")]),e._v(" "),n("p",[e._v("如果key相同，patch比较，如果旧的在新的前面，就把旧的移到新的前面")]),e._v(" "),n("p",[e._v("不同就找到位置 mount")]),e._v(" "),n("p",[e._v("循环旧的，不存在就删了")]),e._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" lastIndex "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v(" nextChildren"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" nextVNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" nextChildren"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    find "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v(" prevChildren"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" j"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" prevVNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" prevChildren"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("nextVNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("key "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("===")]),e._v(" prevVNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n      find "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("patch")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("prevVNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" nextVNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" container"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("j "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v(" lastIndex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 需要移动")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" refNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" nextChildren"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("el"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("nextSibling\n        container"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("insertBefore")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("prevVNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("el"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" refNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("break")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("else")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 更新 lastIndex")]),e._v("\n        lastIndex "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" j\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v("find"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 挂载新节点")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" refNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("\n      i "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("?")]),e._v(" prevChildren"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("el\n        "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" nextChildren"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("el"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("nextSibling\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("mount")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("nextVNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" container"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" refNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 移除已经不存在的节点")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v(" prevChildren"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" prevVNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" prevChildren"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" has "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" nextChildren"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("find")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("nextVNode")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" nextVNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("key "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("===")]),e._v(" prevVNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("key\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v("has"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 移除")]),e._v("\n    container"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("removeChild")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("prevVNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("el"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),n("h2",{attrs:{id:"爆栈情况"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#爆栈情况"}},[e._v("#")]),e._v(" 爆栈情况")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('"dev": "node -max_old_space_size=4096 build/dev-server.js",\n"build": "node -max_old_space_size=4096  build/build.js",\n')])])]),n("p",[e._v("在package.json中")]),e._v(" "),n("p",[e._v("如果是run dev时报错,在package.json文件里的scripts字段的 ‘dev’ : node 后面加上 -max_old_space_size=4096，这里的4096单位是M也就是4G（具体的大小根据实际情况而定）;\n如果是在打包时 就在项目package.json 文件里修改：“build”: “node 后面加上**-max_old_space_size=4096**")]),e._v(" "),n("h2",{attrs:{id:"hook"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hook"}},[e._v("#")]),e._v(" hook")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("this.$on('hook:beforeDestroy', () => {\n  window.removeEventListener('uidChange', this.uidChange)\n  window.removeEventListener('onShowEvent', this.backRefresh)\n})\n")])])]),n("h2",{attrs:{id:"vue-cli3-项目-webstorm不能跳转"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue-cli3-项目-webstorm不能跳转"}},[e._v("#")]),e._v(" vue-cli3+项目 webstorm不能跳转")]),e._v(" "),n("p",[e._v("新建个文件，webstorm里将webpack的配置指向该文件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('\n/*此文件未使用，只是为了让idea可以识别实际位置*/\nconst path = require("path");\n \nfunction resolve (dir) {\n  return path.join(__dirname, dir);\n}\n \nmodule.exports = {\n  resolve: {\n    alias: {\n      "@": resolve("src"),\n    },\n  },\n};\n')])])]),n("h2",{attrs:{id:"vue-cli3增加打包分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue-cli3增加打包分析"}},[e._v("#")]),e._v(" vue-cli3增加打包分析")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" vue add webpack-bundle-analyzer\n \n npm run build --report\n")])])]),n("h2",{attrs:{id:"vue-36个技巧"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue-36个技巧"}},[e._v("#")]),e._v(" vue 36个技巧")]),e._v(" "),n("h3",{attrs:{id:"_1-require-context"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-require-context"}},[e._v("#")]),e._v(" 1.require.context()")]),e._v(" "),n("p",[e._v("1.场景:如页面需要导入多个组件,原始写法:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import titleCom from '@/components/home/titleCom'\nimport bannerCom from '@/components/home/bannerCom'\nimport cellCom from '@/components/home/cellCom'\ncomponents:{titleCom,bannerCom,cellCom}\n")])])]),n("p",[e._v("2.这样就写了大量重复的代码,利用 require.context 可以写成")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const path = require('path')\nconst files = require.context('@/components/home', false, /\\.vue$/)\nconst modules = {}\nfiles.keys().forEach(key => {\n  const name = path.basename(key, '.vue')\n  modules[name] = files(key).default || files(key)\n})\ncomponents:modules\n")])])]),n("p",[e._v("这样不管页面引入多少组件,都可以使用这个方法")]),e._v(" "),n("p",[e._v("3.API 方法")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("实际上是 webpack 的方法,vue 工程一般基于 webpack,所以可以使用\nrequire.context(directory,useSubdirectories,regExp)\n接收三个参数:\ndirectory：说明需要检索的目录\nuseSubdirectories：是否检索子目录\nregExp: 匹配文件的正则表达式,一般是文件名\n")])])]),n("h3",{attrs:{id:"_2-watch"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-watch"}},[e._v("#")]),e._v(" 2.watch")]),e._v(" "),n("h4",{attrs:{id:"_2-1-常用用法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-常用用法"}},[e._v("#")]),e._v(" 2.1 常用用法")]),e._v(" "),n("p",[e._v("1.场景:表格初始进来需要调查询接口 getList(),然后input 改变会重新查询")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("created(){\n  this.getList()\n},\nwatch: {\n  inpVal(){\n    this.getList()\n  }\n}\n")])])]),n("h3",{attrs:{id:"_2-2-立即执行"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-立即执行"}},[e._v("#")]),e._v(" 2.2 立即执行")]),e._v(" "),n("p",[e._v("2.可以直接利用 watch 的immediate和handler属性简写")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("watch: {\n  inpVal:{\n    handler: 'getList',\n      immediate: true\n  }\n}\n")])])]),n("h3",{attrs:{id:"_2-3-深度监听"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-深度监听"}},[e._v("#")]),e._v(" 2.3 深度监听")]),e._v(" "),n("p",[e._v("3.watch 的 deep 属性,深度监听,也就是监听复杂数据类型")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("watch:{\n  inpValObj:{\n    handler(newVal,oldVal){\n      console.log(newVal)\n      console.log(oldVal)\n    },\n    deep:true\n  }\n}\n")])])]),n("p",[e._v("此时发现oldVal和 newVal 值一样;\n因为它们索引同一个对象/数组,Vue 不会保留修改之前值的副本;\n所以深度监听虽然可以监听到对象的变化,但是无法监听到具体对象里面那个属性的变化")]),e._v(" "),n("h3",{attrs:{id:"_3-14种组件通讯"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-14种组件通讯"}},[e._v("#")]),e._v(" 3.  14种组件通讯")]),e._v(" "),n("h4",{attrs:{id:"_3-1-props"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-props"}},[e._v("#")]),e._v(" 3.1 props")]),e._v(" "),n("p",[e._v("这个应该非常属性,就是父传子的属性;\nprops 值可以是一个数组或对象;")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 数组:不建议使用\nprops:[]\n\n// 对象\nprops:{\n inpVal:{\n  type:Number, //传入值限定类型\n  // type 值可为String,Number,Boolean,Array,Object,Date,Function,Symbol\n  // type 还可以是一个自定义的构造函数，并且通过 instanceof 来进行检查确认\n  required: true, //是否必传\n  default:200,  //默认值,对象或数组默认值必须从一个工厂函数获取如 default:()=>[]\n  validator:(value) {\n    // 这个值必须匹配下列字符串中的一个\n    return ['success', 'warning', 'danger'].indexOf(value) !== -1\n  }\n }\n}\n")])])]),n("h4",{attrs:{id:"_3-2-emit"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-emit"}},[e._v("#")]),e._v(" 3.2 $emit")]),e._v(" "),n("p",[e._v("这个也应该非常常见,触发子组件触发父组件给自己绑定的事件,其实就是子传父的方法")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 父组件\n<home @title=\"title\">\n// 子组件\nthis.$emit('title',[{title:'这是title'}])\n")])])]),n("h4",{attrs:{id:"_3-3-vuex"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-vuex"}},[e._v("#")]),e._v(" 3.3 vuex")]),e._v(" "),n("p",[e._v("1.这个也是很常用的,vuex 是一个状态管理器\n2.是一个独立的插件,适合数据共享多的项目里面,因为如果只是简单的通讯,使用起来会比较重\n3.API")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("state:定义存贮数据的仓库 ,可通过this.$store.state 或mapState访问\ngetter:获取 store 值,可认为是 store 的计算属性,可通过this.$store.getter 或\n       mapGetters访问\nmutation:同步改变 store 值,为什么会设计成同步,因为mutation是直接改变 store 值,\n         vue 对操作进行了记录,如果是异步无法追踪改变.可通过mapMutations调用\naction:异步调用函数执行mutation,进而改变 store 值,可通过 this.$dispatch或mapActions\n       访问\nmodules:模块,如果状态过多,可以拆分成模块,最后在入口通过...解构引入\n")])])]),n("h4",{attrs:{id:"_3-4-attrs和attrs和listeners"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-attrs和attrs和listeners"}},[e._v("#")]),e._v(" 3.4 attrs和"),n("em",[e._v("a"),n("strong",[e._v("t")]),e._v("t"),n("strong",[e._v("r")]),e._v("s")]),e._v("和listeners")]),e._v(" "),n("p",[e._v("2.4.0 新增\n这两个是不常用属性,但是高级用法很常见;\n1.$attrs\n场景:如果父传子有很多值,那么在子组件需要定义多个 props\n解决:$attrs获取子传父中未在 props 定义的值")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 父组件\n<home title="这是标题" width="80" height="80" imgUrl="imgUrl"/>\n\n// 子组件\nmounted() {\n  console.log(this.$attrs) //{title: "这是标题", width: "80", height: "80", imgUrl: "imgUrl"}\n},\n')])])]),n("p",[e._v("相对应的如果子组件定义了 props,打印的值就是剔除定义的属性")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('props: {\n  width: {\n    type: String,\n    default: \'\'\n  }\n},\nmounted() {\n  console.log(this.$attrs) //{title: "这是标题", height: "80", imgUrl: "imgUrl"}\n},\n')])])]),n("p",[e._v('2.$listeners\n场景:子组件需要调用父组件的方法\n解决:父组件的方法可以通过 v-on="$listeners" 传入内部组件——在创建更高层次的组件时非常有用')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 父组件\n<home @change="change"/>\n\n// 子组件\nmounted() {\n  console.log(this.$listeners) //即可拿到 change 事件\n}\n')])])]),n("p",[e._v("如果是孙组件要访问父组件的属性和调用方法,直接一级一级传下去就可以")]),e._v(" "),n("p",[e._v("3.inheritAttrs")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 父组件\n<home title="这是标题" width="80" height="80" imgUrl="imgUrl"/>\n\n// 子组件\nmounted() {\n  console.log(this.$attrs) //{title: "这是标题", width: "80", height: "80", imgUrl: "imgUrl"}\n},\n\ninheritAttrs默认值为true，true的意思是将父组件中除了props外的属性添加到子组件的根节点上(说明，即使设置为true，子组件仍然可以通过$attr获取到props意外的属性)\n将inheritAttrs:false后,属性就不会显示在根节点上了\n')])])]),n("h4",{attrs:{id:"_3-5-provide和inject"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-provide和inject"}},[e._v("#")]),e._v(" 3.5 provide和inject")]),e._v(" "),n("p",[e._v("2.2.0 新增\n描述:\nprovide 和 inject 主要为高阶插件/组件库提供用例。并不推荐直接用于应用程序代码中;\n并且这对选项需要一起使用;\n以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//父组件:\nprovide: { //provide 是一个对象,提供一个属性或方法\n  foo: '这是 foo',\n  fooMethod:()=>{\n    console.log('父组件 fooMethod 被调用')\n  }\n},\n\n// 子或者孙子组件\ninject: ['foo','fooMethod'], //数组或者对象,注入到子组件\nmounted() {\n  this.fooMethod()\n  console.log(this.foo)\n}\n//在父组件下面所有的子组件都可以利用inject\n")])])]),n("p",[e._v("provide 和 inject 绑定并不是可响应的。这是官方刻意为之的。\n然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的,对象是因为是引用类型")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//父组件:\nprovide: { \n  foo: '这是 foo'\n},\nmounted(){\n  this.foo='这是新的 foo'\n}\n\n// 子或者孙子组件\ninject: ['foo'], \nmounted() {\n  console.log(this.foo) //子组件打印的还是'这是 foo'\n}\n")])])]),n("h4",{attrs:{id:"_3-6-parent和paren-t和children"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-parent和paren-t和children"}},[e._v("#")]),e._v(" 3.6 parent和"),n("em",[e._v("p"),n("strong",[e._v("a")]),e._v("r"),n("strong",[e._v("e")]),e._v("n**t")]),e._v("和children")]),e._v(" "),n("p",[e._v("$parent:父实例\n$children:子实例")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//父组件\nmounted(){\n  console.log(this.$children) \n  //可以拿到 一级子组件的属性和方法\n  //所以就可以直接改变 data,或者调用 methods 方法\n}\n\n//子组件\nmounted(){\n  console.log(this.$parent) //可以拿到 parent 的属性和方法\n}\n")])])]),n("p",[e._v("children和"),n("em",[e._v("c"),n("strong",[e._v("h")]),e._v("i"),n("strong",[e._v("l")]),e._v("d"),n("strong",[e._v("r")]),e._v("e**n")]),e._v("和parent 并不保证顺序，也不是响应式的\n只能拿到一级父组件和子组件")]),e._v(" "),n("h4",{attrs:{id:"_3-7-refs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-refs"}},[e._v("#")]),e._v(" 3.7 $refs")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 父组件\n<home ref="home"/>\n\nmounted(){\n  console.log(this.$refs.home) //即可拿到子组件的实例,就可以直接操作 data 和 methods\n}\n')])])]),n("h4",{attrs:{id:"_3-8-root"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-8-root"}},[e._v("#")]),e._v(" 3.8 $root")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 父组件\nmounted(){\n  console.log(this.$root) //获取根实例,最后所有组件都是挂载到根实例上\n  console.log(this.$root.$children[0]) //获取根实例的一级子组件\n  console.log(this.$root.$children[0].$children[0]) //获取根实例的二级子组件\n}\n")])])]),n("h4",{attrs:{id:"_3-9-sync"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-9-sync"}},[e._v("#")]),e._v(" 3.9 .sync")]),e._v(" "),n("p",[e._v("在 vue@1.x 的时候曾作为双向绑定功能存在，即子组件可以修改父组件中的值;\n在 vue@2.0 的由于违背单项数据流的设计被干掉了;\n在 vue@2.3.0+ 以上版本又重新引入了这个 .sync 修饰符;")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 父组件\n<home :title.sync="title" />\n//编译时会被扩展为\n<home :title="title"  @update:title="val => title = val"/>\n\n// 子组件\n// 所以子组件可以通过$emit 触发 update 方法改变\nmounted(){\n  this.$emit("update:title", \'这是新的title\')\n}\n')])])]),n("h4",{attrs:{id:"_3-10-v-slot"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-10-v-slot"}},[e._v("#")]),e._v(" 3.10 v-slot")]),e._v(" "),n("p",[e._v("2.6.0 新增\n1.slot,slot-cope,scope 在 2.6.0 中都被废弃,但未被移除\n2.作用就是将父组件的 template 传入子组件\n3.插槽分类:\nA.匿名插槽(也叫默认插槽): 没有命名,有且只有一个;")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 父组件\n<todo-list> \n    <template v-slot:default>\n       任意内容\n       <p>我是匿名插槽 </p>\n    </template>\n</todo-list> \n\n// 子组件\n<slot>我是默认值</slot>\n//v-slot:default写上感觉和具名写法比较统一,容易理解,也可以不用写\n")])])]),n("p",[e._v("B.具名插槽: 相对匿名插槽组件slot标签带name命名的;")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 父组件\n<todo-list> \n    <template v-slot:todo>\n       任意内容\n       <p>我是匿名插槽 </p>\n    </template>\n</todo-list> \n\n//子组件\n<slot name="todo">我是默认值</slot>\n')])])]),n("p",[e._v("C.作用域插槽: 子组件内数据可以被父页面拿到(解决了数据只能从父页面传递给子组件)")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 父组件\n<todo-list>\n <template v-slot:todo="slotProps" >\n   {{slotProps.user.firstName}}\n </template> \n</todo-list> \n//slotProps 可以随意命名\n//slotProps 接取的是子组件标签slot上属性数据的集合所有v-bind:user="user"\n\n// 子组件\n<slot name="todo" :user="user" :test="test">\n    {{ user.lastName }}\n </slot> \ndata() {\n    return {\n      user:{\n        lastName:"Zhang",\n        firstName:"yue"\n      },\n      test:[1,2,3,4]\n    }\n  },\n// {{ user.lastName }}是默认数据  v-slot:todo 当父页面没有(="slotProps")\n')])])]),n("h4",{attrs:{id:"_3-11-eventbus"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-11-eventbus"}},[e._v("#")]),e._v(" 3.11 EventBus")]),e._v(" "),n("p",[e._v("1.就是声明一个全局Vue实例变量 EventBus , 把所有的通信数据，事件监听都存储到这个变量上;\n2.类似于 Vuex。但这种方式只适用于极小的项目\n3.原理就是利用on和"),n("em",[e._v("o**n")]),e._v("和emit 并实例化一个全局 vue 实现数据共享")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 在 main.js\nVue.prototype.$eventBus=new Vue()\n\n// 传值组件\nthis.$eventBus.$emit('eventTarget','这是eventTarget传过来的值')\n\n// 接收组件\nthis.$eventBus.$on(\"eventTarget\",v=>{\n  console.log('eventTarget',v);//这是eventTarget传过来的值\n})\n")])])]),n("p",[e._v("4.可以实现平级,嵌套组件传值,但是对应的事件名eventTarget必须是全局唯一的")]),e._v(" "),n("h4",{attrs:{id:"_3-12-broadcast和dispatch"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-12-broadcast和dispatch"}},[e._v("#")]),e._v(" 3.12 broadcast和dispatch")]),e._v(" "),n("p",[e._v("vue 1.x 有这两个方法,事件广播和派发,但是 vue 2.x 删除了\n下面是对两个方法进行的封装")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function broadcast(componentName, eventName, params) {\n  this.$children.forEach(child => {\n    var name = child.$options.componentName;\n\n    if (name === componentName) {\n      child.$emit.apply(child, [eventName].concat(params));\n    } else {\n      broadcast.apply(child, [componentName, eventName].concat(params));\n    }\n  });\n}\nexport default {\n  methods: {\n    dispatch(componentName, eventName, params) {\n      var parent = this.$parent;\n      var name = parent.$options.componentName;\n      while (parent && (!name || name !== componentName)) {\n        parent = parent.$parent;\n\n        if (parent) {\n          name = parent.$options.componentName;\n        }\n      }\n      if (parent) {\n        parent.$emit.apply(parent, [eventName].concat(params));\n      }\n    },\n    broadcast(componentName, eventName, params) {\n      broadcast.call(this, componentName, eventName, params);\n    }\n  }\n}\n")])])]),n("h4",{attrs:{id:"_3-13-路由传参"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-13-路由传参"}},[e._v("#")]),e._v(" 3.13 路由传参")]),e._v(" "),n("p",[e._v("1.方案一")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 路由定义\n{\n  path: '/describe/:id',\n  name: 'Describe',\n  component: Describe\n}\n// 页面传参\nthis.$router.push({\n  path: `/describe/${id}`,\n})\n// 页面获取\nthis.$route.params.id\n")])])]),n("p",[e._v("2.方案二")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 路由定义\n{\n  path: '/describe',\n  name: 'Describe',\n  omponent: Describe\n}\n// 页面传参\nthis.$router.push({\n  name: 'Describe',\n  params: {\n    id: id\n  }\n})\n// 页面获取\nthis.$route.params.id\n")])])]),n("p",[e._v("3.方案三")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 路由定义\n{\n  path: '/describe',\n  name: 'Describe',\n  component: Describe\n}\n// 页面传参\nthis.$router.push({\n  path: '/describe',\n    query: {\n      id: id\n  `}\n)\n// 页面获取\nthis.$route.query.id\n")])])]),n("p",[e._v("4.三种方案对比\n方案二参数不会拼接在路由后面,页面刷新参数会丢失\n方案一和三参数拼接在后面,丑,而且暴露了信息")]),e._v(" "),n("h4",{attrs:{id:"_3-14-vue-observable"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-14-vue-observable"}},[e._v("#")]),e._v(" 3.14 Vue.observable")]),e._v(" "),n("p",[e._v("2.6.0 新增\n用法:让一个对象可响应。Vue 内部会用它来处理 data 函数返回的对象;")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("返回的对象可以直接用于渲染函数和计算属性内，并且会在发生改变时触发相应的更新;\n也可以作为最小化的跨组件状态存储器，用于简单的场景。\n")])])]),n("p",[e._v("通讯原理实质上是利用Vue.observable实现一个简易的 vuex")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 文件路径 - /store/store.js\nimport Vue from 'vue'\n\nexport const store = Vue.observable({ count: 0 })\nexport const mutations = {\n  setCount (count) {\n    store.count = count\n  }\n}\n\n//使用\n<template>\n    <div>\n        <label for=\"bookNum\">数 量</label>\n            <button @click=\"setCount(count+1)\">+</button>\n            <span>{{count}}</span>\n            <button @click=\"setCount(count-1)\">-</button>\n    </div>\n</template>\n\n<script>\nimport { store, mutations } from '../store/store' // Vue2.6新增API Observable\n\nexport default {\n  name: 'Add',\n  computed: {\n    count () {\n      return store.count\n    }\n  },\n  methods: {\n    setCount: mutations.setCount\n  }\n}\n<\/script>\n")])])]),n("h3",{attrs:{id:"_4-render-函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-render-函数"}},[e._v("#")]),e._v(" 4.render 函数")]),e._v(" "),n("p",[e._v("1.场景:有些代码在 template 里面写会重复很多,所以这个时候 render 函数就有作用啦")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 根据 props 生成标签\n// 初级\n<template>\n  <div>\n    <div v-if=\"level === 1\"> <slot></slot> </div>\n    <p v-else-if=\"level === 2\"> <slot></slot> </p>\n    <h1 v-else-if=\"level === 3\"> <slot></slot> </h1>\n    <h2 v-else-if=\"level === 4\"> <slot></slot> </h2>\n    <strong v-else-if=\"level === 5\"> <slot></slot> </stong>\n    <textarea v-else-if=\"level === 6\"> <slot></slot> </textarea>\n  </div>\n</template>\n\n// 优化版,利用 render 函数减小了代码重复率\n<template>\n  <div>\n    <child :level=\"level\">Hello world!</child>\n  </div>\n</template>\n\n<script type='text/javascript'>\n  import Vue from 'vue'\n  Vue.component('child', {\n    render(h) {\n      const tag = ['div', 'p', 'strong', 'h1', 'h2', 'textarea'][this.level-1]\n      return h(tag, this.$slots.default)\n    },\n    props: {\n      level: {  type: Number,  required: true  } \n    }\n  })   \n  export default {\n    name: 'hehe',\n    data() { return { level: 3 } }\n  }\n<\/script>\n")])])]),n("p",[e._v("2.render 和 template 的对比\n前者适合复杂逻辑,后者适合逻辑简单;\n后者属于声明是渲染，前者属于自定Render函数;\n前者的性能较高，后者性能较低。")]),e._v(" "),n("h3",{attrs:{id:"_5-异步组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-异步组件"}},[e._v("#")]),e._v(" 5.异步组件")]),e._v(" "),n("p",[e._v("场景:项目过大就会导致加载缓慢,所以异步组件实现按需加载就是必须要做的事啦\n1.异步注册组件\n3种方法")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 工厂函数执行 resolve 回调\nVue.component('async-webpack-example', function (resolve) {\n  // 这个特殊的 `require` 语法将会告诉 webpack\n  // 自动将你的构建代码切割成多个包, 这些包\n  // 会通过 Ajax 请求加载\n  require(['./my-async-component'], resolve)\n})\n\n// 工厂函数返回 Promise\nVue.component(\n  'async-webpack-example',\n  // 这个 `import` 函数会返回一个 `Promise` 对象。\n  () => import('./my-async-component')\n)\n\n// 工厂函数返回一个配置化组件对象\nconst AsyncComponent = () => ({\n  // 需要加载的组件 (应该是一个 `Promise` 对象)\n  component: import('./MyComponent.vue'),\n  // 异步组件加载时使用的组件\n  loading: LoadingComponent,\n  // 加载失败时使用的组件\n  error: ErrorComponent,\n  // 展示加载时组件的延时时间。默认值是 200 (毫秒)\n  delay: 200,\n  // 如果提供了超时时间且组件加载也超时了，\n  // 则使用加载失败时使用的组件。默认值是：`Infinity`\n  timeout: 3000\n})\n")])])]),n("p",[e._v("异步组件的渲染本质上其实就是执行2次或者2次以上的渲染, 先把当前组件渲染为注释节点, 当组件加载成功后, 通过 forceRender 执行重新渲染。或者是渲染为注释节点, 然后再渲染为loading节点, 在渲染为请求完成的组件")]),e._v(" "),n("p",[e._v("2.路由的按需加载")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("webpack< 2.4 时\n{\n  path:'/',\n  name:'home',\n  components:resolve=>require(['@/components/home'],resolve)\n}\n\nwebpack> 2.4 时\n{\n  path:'/',\n  name:'home',\n  components:()=>import('@/components/home')\n}\n\nimport()方法由es6提出，import()方法是动态加载，返回一个Promise对象，then方法的参数是加载到的模块。类似于Node.js的require方法，主要import()方法是异步加载的。\n")])])]),n("h3",{attrs:{id:"_6-动态组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-动态组件"}},[e._v("#")]),e._v(" 6.动态组件")]),e._v(" "),n("p",[e._v("场景:做一个 tab 切换时就会涉及到组件动态加载")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<component v-bind:is="currentTabComponent"></component>\n')])])]),n("p",[e._v("但是这样每次组件都会重新加载,会消耗大量性能,所以"),n("code",[e._v("<keep-alive>")]),e._v(" 就起到了作用")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<keep-alive>\n  <component v-bind:is="currentTabComponent"></component>\n</keep-alive>\n')])])]),n("p",[e._v("这样切换效果没有动画效果,这个也不用着急,可以利用内置的"),n("code",[e._v("<transition>")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<transition>\n<keep-alive>\n  <component v-bind:is="currentTabComponent"></component>\n</keep-alive>\n</transition>\n')])])]),n("h3",{attrs:{id:"_7-递归组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-递归组件"}},[e._v("#")]),e._v(" 7.递归组件")]),e._v(" "),n("p",[e._v("场景:如果开发一个 tree 组件,里面层级是根据后台数据决定的,这个时候就需要用到动态组件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 递归组件: 组件在它的模板内可以递归的调用自己，只要给组件设置name组件就可以了。\n// 设置那么House在组件模板内就可以递归使用了,不过需要注意的是，\n// 必须给一个条件来限制数量，否则会抛出错误: max stack size exceeded\n// 组件递归用来开发一些具体有未知层级关系的独立组件。比如：\n// 联级选择器和树形控件 \n\n<template>\n  <div v-for="(item,index) in treeArr">\n      子组件，当前层级值： {{index}} <br/>\n      \x3c!-- 递归调用自身, 后台判断是否不存在改值 --\x3e\n      <tree :item="item.arr" v-if="item.flag"></tree>\n  </div>\n</template>\n<script>\nexport default {\n  // 必须定义name，组件内部才能递归调用\n  name: \'tree\',\n  data(){\n    return {}\n  },\n  // 接收外部传入的值\n  props: {\n     item: {\n      type:Array,\n      default: ()=>[]\n    }\n  }\n}\n<\/script>\n')])])]),n("p",[e._v("递归组件必须设置name 和结束的阀值")]),e._v(" "),n("h3",{attrs:{id:"_8-函数式组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-函数式组件"}},[e._v("#")]),e._v(" 8.函数式组件")]),e._v(" "),n("p",[e._v("定义:无状态,无法实例化，内部没有任何生命周期处理方法\n规则:在 2.3.0 之前的版本中，如果一个函数式组件想要接收 prop，则 props 选项是必须的。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("在 2.3.0 或以上的版本中，你可以省略 props 选项，所有组件上的特性都会被自动隐式解析为 prop\n在 2.5.0 及以上版本中，如果你使用了单文件组件(就是普通的.vue 文件),可以直接在 template 上声明functional\n组件需要的一切都是通过 context 参数传递\n")])])]),n("p",[e._v("context 属性有:\n1.props：提供所有 prop 的对象\n2.children: VNode 子节点的数组\n3.slots: 一个函数，返回了包含所有插槽的对象\n4.scopedSlots: (2.6.0+) 一个暴露传入的作用域插槽的对象。也以函数形式暴露普通插槽。\n5.data：传递给组件的整个数据对象，作为 createElement 的第二个参数传入组件\n6.parent：对父组件的引用\n7.listeners: (2.3.0+) 一个包含了所有父组件为当前组件注册的事件监听器的对象。这是 data.on 的一个别名。\n8.injections: (2.3.0+) 如果使用了 inject 选项，则该对象包含了应当被注入的属性")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<template functional>\n  <div v-for="(item,index) in props.arr">{{item}}</div>\n</template>\n')])])]),n("h3",{attrs:{id:"_9-components和-vue-component"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-components和-vue-component"}},[e._v("#")]),e._v(" 9.components和 Vue.component")]),e._v(" "),n("p",[e._v("components:局部注册组件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("export default{\n  components:{home}\n}\n")])])]),n("p",[e._v("Vue.component:全局注册组件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Vue.component('home',home)\n")])])]),n("h3",{attrs:{id:"_10-vue-extend"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-vue-extend"}},[e._v("#")]),e._v(" 10.Vue.extend")]),e._v(" "),n("p",[e._v("场景:vue 组件中有些需要将一些元素挂载到元素上,这个时候 extend 就起到作用了\n是构造一个组件的语法器\n写法:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 创建构造器\nvar Profile = Vue.extend({\n  template: '<p>{{extendData}}</br>实例传入的数据为:{{propsExtend}}</p>',//template对应的标签最外层必须只有一个标签\n  data: function () {\n    return {\n      extendData: '这是extend扩展的数据',\n    }\n  },\n  props:['propsExtend']\n})\n\n// 创建的构造器可以挂载到元素上,也可以通过 components 或 Vue.component()注册使用\n// 挂载到一个元素上。可以通过propsData传参.\nnew Profile({propsData:{propsExtend:'我是实例传入的数据'}}).$mount('#app-extend')\n\n// 通过 components 或 Vue.component()注册\nVue.component('Profile',Profile)\n")])])]),n("h3",{attrs:{id:"_11-mixins"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-mixins"}},[e._v("#")]),e._v(" 11.mixins")]),e._v(" "),n("p",[e._v("场景:有些组件有些重复的 js 逻辑,如校验手机验证码,解析时间等,mixins 就可以实现这种混入\nmixins 值是一个数组")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const mixin={\n    created(){\n      this.dealTime()\n    },\n    methods:{\n      dealTime(){\n        console.log('这是mixin的dealTime里面的方法');\n      }\n  }\n}\n\nexport default{\n  mixins:[mixin]\n}\n")])])]),n("h3",{attrs:{id:"_12-extends"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-extends"}},[e._v("#")]),e._v(" 12.extends")]),e._v(" "),n("p",[e._v("extends用法和mixins很相似,只不过接收的参数是简单的选项对象或构造函数,所以extends只能单次扩展一个组件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const extend={\n    created(){\n      this.dealTime()\n    },\n    methods:{\n      dealTime(){\n        console.log('这是mixin的dealTime里面的方法');\n      }\n  }\n}\n\nexport default{\n  extends:extend\n}\n")])])]),n("h3",{attrs:{id:"_13-vue-use"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-vue-use"}},[e._v("#")]),e._v(" 13.Vue.use()")]),e._v(" "),n("p",[e._v("场景:我们使用 element时会先 import,再 Vue.use()一下,实际上就是注册组件,触发 install 方法;\n这个在组件调用会经常使用到;\n会自动组织多次注册相同的插件.")]),e._v(" "),n("h3",{attrs:{id:"_14-install"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_14-install"}},[e._v("#")]),e._v(" 14.install")]),e._v(" "),n("p",[e._v("场景:在 Vue.use()说到,执行该方法会触发 install\n是开发vue的插件,这个方法的第一个参数是 Vue 构造器，第二个参数是一个可选的选项对象(可选)")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var MyPlugin = {};\n  MyPlugin.install = function (Vue, options) {\n    // 2. 添加全局资源,第二个参数传一个值默认是update对应的值\n    Vue.directive('click', {\n      bind(el, binding, vnode, oldVnode) {\n        //做绑定的准备工作,添加时间监听\n        console.log('指令my-directive的bind执行啦');\n      },\n      inserted: function(el){\n      //获取绑定的元素\n      console.log('指令my-directive的inserted执行啦');\n      },\n      update: function(){\n      //根据获得的新值执行对应的更新\n      //对于初始值也会调用一次\n      console.log('指令my-directive的update执行啦');\n      },\n      componentUpdated: function(){\n      console.log('指令my-directive的componentUpdated执行啦');\n      },\n      unbind: function(){\n      //做清理操作\n      //比如移除bind时绑定的事件监听器\n      console.log('指令my-directive的unbind执行啦');\n      }\n    })\n\n    // 3. 注入组件\n    Vue.mixin({\n      created: function () {\n        console.log('注入组件的created被调用啦');\n        console.log('options的值为',options)\n      }\n    })\n\n    // 4. 添加实例方法\n    Vue.prototype.$myMethod = function (methodOptions) {\n      console.log('实例方法myMethod被调用啦');\n    }\n  }\n\n  //调用MyPlugin\n  Vue.use(MyPlugin,{someOption: true })\n\n  //3.挂载\n  new Vue({\n    el: '#app'\n  });\n")])])]),n("p",[e._v("更多请戳 vue中extend，mixins，extends，components,install的几个操作")]),e._v(" "),n("h3",{attrs:{id:"_15-vue-nexttick"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_15-vue-nexttick"}},[e._v("#")]),e._v(" 15. Vue.nextTick")]),e._v(" "),n("p",[e._v("2.1.0 新增\n场景:页面加载时需要让文本框获取焦点\n用法:在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("mounted(){ //因为 mounted 阶段 dom 并未渲染完毕,所以需要$nextTick\n  this.$nextTick(() => {\n    this.$refs.inputs.focus() //通过 $refs 获取dom 并绑定 focus 方法\n  })\n}\n")])])]),n("h3",{attrs:{id:"_16-vue-directive"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_16-vue-directive"}},[e._v("#")]),e._v(" 16.Vue.directive")]),e._v(" "),n("h4",{attrs:{id:"_16-1-使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_16-1-使用"}},[e._v("#")]),e._v(" 16.1 使用")]),e._v(" "),n("p",[e._v("场景:官方给我们提供了很多指令,但是我们如果想将文字变成指定的颜色定义成指令使用,这个时候就需要用到Vue.directive")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 全局定义\nVue.directive("change-color",function(el,binding,vnode){\n  el.style["color"]= binding.value;\n})\n\n// 使用\n<template>\n<div v-change-color=“color”>{{message}}</div>\n</template>\n<script>\n  export default{\n    data(){\n      return{\n        color:\'green\'\n      }\n    }\n  }\n<\/script>\n')])])]),n("h4",{attrs:{id:"_16-2-生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_16-2-生命周期"}},[e._v("#")]),e._v(" 16.2 生命周期")]),e._v(" "),n("p",[e._v("1.bind 只调用一次，指令第一次绑定到元素时候调用，用这个钩子可以定义一个绑定时执行一次的初始化动作。\n2.inserted:被绑定的元素插入父节点的时候调用(父节点存在即可调用，不必存在document中)\n3.update: 被绑定与元素所在模板更新时调用，而且无论绑定值是否有变化，通过比较更新前后的绑定值，忽略不必要的模板更新\n4.componentUpdate :被绑定的元素所在模板完成一次更新更新周期的时候调用\n5.unbind: 只调用一次，指令月元素解绑的时候调用")]),e._v(" "),n("h3",{attrs:{id:"_17-vue-filter"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_17-vue-filter"}},[e._v("#")]),e._v(" 17. Vue.filter")]),e._v(" "),n("p",[e._v("场景:时间戳转化成年月日这是一个公共方法,所以可以抽离成过滤器使用")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 使用\n// 在双花括号中\n{{ message | capitalize }}\n\n// 在 `v-bind` 中\n<div v-bind:id=\"rawId | formatId\"></div>\n\n// 全局注册\nVue.filter('stampToYYMMDD', (value) =>{\n  // 处理逻辑\n})\n\n// 局部注册\nfilters: {\n  stampToYYMMDD: (value)=> {\n    // 处理逻辑\n  }\n}\n\n// 多个过滤器全局注册\n// /src/common/filters.js\nlet dateServer = value => value.replace(/(\\d{4})(\\d{2})(\\d{2})/g, '$1-$2-$3') \nexport { dateServer }\n// /src/main.js\nimport * as custom from './common/filters/custom'\nObject.keys(custom).forEach(key => Vue.filter(key, custom[key]))\n")])])]),n("h3",{attrs:{id:"_18-vue-compile"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_18-vue-compile"}},[e._v("#")]),e._v(" 18.Vue.compile")]),e._v(" "),n("p",[e._v("场景:在 render 函数中编译模板字符串。只在独立构建时有效")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var res = Vue.compile('<div><span>{{ msg }}</span></div>')\n\nnew Vue({\n  data: {\n    msg: 'hello'\n  },\n  render: res.render,\n  staticRenderFns: res.staticRenderFns\n})\n")])])]),n("h3",{attrs:{id:"_19-vue-version"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_19-vue-version"}},[e._v("#")]),e._v(" 19.Vue.version")]),e._v(" "),n("p",[e._v("场景:有些开发插件需要针对不同 vue 版本做兼容,所以就会用到 Vue.version\n用法:Vue.version()可以获取 vue 版本")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var version = Number(Vue.version.split('.')[0])\n\nif (version === 2) {\n  // Vue v2.x.x\n} else if (version === 1) {\n  // Vue v1.x.x\n} else {\n  // Unsupported versions of Vue\n}\n")])])]),n("h3",{attrs:{id:"_20-vue-set"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_20-vue-set"}},[e._v("#")]),e._v(" 20.Vue.set()")]),e._v(" "),n("p",[e._v("场景:当你利用索引直接设置一个数组项时或你修改数组的长度时,由于 Object.defineprototype()方法限制,数据不响应式更新")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("不过vue.3.x 将利用 proxy 这个问题将得到解决\n")])])]),n("p",[e._v("解决方案:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 利用 set\nthis.$set(arr,index,item)\n\n// 利用数组 push(),splice()\n")])])]),n("h3",{attrs:{id:"_21-vue-config-keycodes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_21-vue-config-keycodes"}},[e._v("#")]),e._v(" 21.Vue.config.keyCodes")]),e._v(" "),n("p",[e._v("场景:自定义按键修饰符别名")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 将键码为 113 定义为 f2\nVue.config.keyCodes.f2 = 113;\n<input type="text" @keyup.f2="add"/>\n')])])]),n("h3",{attrs:{id:"_22-vue-config-performance"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_22-vue-config-performance"}},[e._v("#")]),e._v(" 22.Vue.config.performance")]),e._v(" "),n("p",[e._v("场景:监听性能")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Vue.config.performance = true\n")])])]),n("p",[e._v("只适用于开发模式和支持 performance.mark API 的浏览器上")]),e._v(" "),n("h3",{attrs:{id:"_23-vue-config-errorhandler"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_23-vue-config-errorhandler"}},[e._v("#")]),e._v(" 23.Vue.config.errorHandler")]),e._v(" "),n("p",[e._v("1.场景:指定组件的渲染和观察期间未捕获错误的处理函数\n2.规则:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  从 2.2.0 起，这个钩子也会捕获组件生命周期钩子里的错误。同样的，当这个钩子是 undefined 时，被捕获的错误会通过 console.error 输出而避免应用崩溃\n  从 2.4.0 起，这个钩子也会捕获 Vue 自定义事件处理函数内部的错误了\n  从 2.6.0 起，这个钩子也会捕获 v-on DOM 监听器内部抛出的错误。另外，如果任何被覆盖的钩子或处理函数返回一个 Promise 链 (例如 async 函数)，则来自其 Promise 链的错误也会被处理\n")])])]),n("p",[e._v("3.使用")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Vue.config.errorHandler = function (err, vm, info) {\n  // handle error\n  // `info` 是 Vue 特定的错误信息，比如错误所在的生命周期钩子\n  // 只在 2.2.0+ 可用\n}\n")])])]),n("h3",{attrs:{id:"_24-vue-config-warnhandler"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_24-vue-config-warnhandler"}},[e._v("#")]),e._v(" 24.Vue.config.warnHandler")]),e._v(" "),n("p",[e._v("2.4.0 新增\n1.场景:为 Vue 的运行时警告赋予一个自定义处理函数,只会在开发者环境下生效\n2.用法:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Vue.config.warnHandler = function (msg, vm, trace) {\n  // `trace` 是组件的继承关系追踪\n}\n")])])]),n("h3",{attrs:{id:"_25-v-pre"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_25-v-pre"}},[e._v("#")]),e._v(" 25.v-pre")]),e._v(" "),n("p",[e._v("场景:vue 是响应式系统,但是有些静态的标签不需要多次编译,这样可以节省性能")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<span v-pre>{{ this will not be compiled }}</span>   显示的是{{ this will not be compiled }}\n<span v-pre>{{msg}}</span>     即使data里面定义了msg这里仍然是显示的{{msg}}\n")])])]),n("h3",{attrs:{id:"_26-v-cloak"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_26-v-cloak"}},[e._v("#")]),e._v(" 26.v-cloak")]),e._v(" "),n("p",[e._v("场景:在网速慢的情况下,在使用vue绑定数据的时候，渲染页面时会出现变量闪烁\n用法:这个指令保持在元素上直到关联实例结束编译。和 CSS 规则如 [v-cloak] { display: none } 一起用时，这个指令可以隐藏未编译的 Mustache 标签直到实例准备完毕")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// template 中\n<div class="#app" v-cloak>\n    <p>{{value.name}}</p>\n</div>\n\n// css 中\n[v-cloak] {\n    display: none;\n}\n')])])]),n("p",[e._v("这样就可以解决闪烁,但是会出现白屏,这样可以结合骨架屏使用")]),e._v(" "),n("h3",{attrs:{id:"_27-v-once"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_27-v-once"}},[e._v("#")]),e._v(" 27.v-once")]),e._v(" "),n("p",[e._v("场景:有些 template 中的静态 dom 没有改变,这时就只需要渲染一次,可以降低性能开销")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<span v-once> 这时只需要加载一次的标签</span>\n")])])]),n("p",[e._v("v-once 和 v-pre 的区别:\nv-once只渲染一次；v-pre不编译,原样输出")]),e._v(" "),n("h3",{attrs:{id:"_28-事件修饰符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_28-事件修饰符"}},[e._v("#")]),e._v(" 28.事件修饰符")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(".stop:阻止冒泡\n.prevent:阻止默认行为\n.self:仅绑定元素自身触发\n.once: 2.1.4 新增,只触发一次\n.passive: 2.3.0 新增,滚动事件的默认行为 (即滚动行为) 将会立即触发,不能和.prevent 一起使用\n")])])]),n("h3",{attrs:{id:"_29-按键修饰符和按键码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_29-按键修饰符和按键码"}},[e._v("#")]),e._v(" 29.按键修饰符和按键码")]),e._v(" "),n("p",[e._v("场景:有的时候需要监听键盘的行为,如按下 enter 去查询接口等")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 对应键盘上的关键字\n.enter\n.tab\n.delete (捕获“删除”和“退格”键)\n.esc\n.space\n.up\n.down\n.left\n.right\n")])])]),n("h3",{attrs:{id:"_30-vue-router"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_30-vue-router"}},[e._v("#")]),e._v(" 30.Vue-router")]),e._v(" "),n("p",[e._v("场景:Vue-router 是官方提供的路由插件")]),e._v(" "),n("h4",{attrs:{id:"_30-1-缓存和动画"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_30-1-缓存和动画"}},[e._v("#")]),e._v(" 30.1 缓存和动画")]),e._v(" "),n("p",[e._v("1.路由是使用官方组件 vue-router,使用方法相信大家非常熟悉;\n2.这里我就叙述下路由的缓存和动画;\n3.可以用exclude(除了)或者include(包括),2.1.0 新增来坐判断")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<transition>\n  <keep-alive :include="[\'a\', \'b\']">\n  //或include="a,b" :include="/a|b/",a 和 b 表示组件的 name\n  //因为有些页面,如试试数据统计,要实时刷新,所以就不需要缓存\n    <router-view/> //路由标签\n  </keep-alive>\n  <router-view exclude="c"/> \n  // c 表示组件的 name值\n</transition>\n')])])]),n("p",[e._v("注:匹配首先检查组件自身的 name 选项，如果 name 选项不可用，则匹配它的局部注册名称 (父组件 components 选项的键值)。匿名组件不能被匹配\n4.用 v-if 做判断,组件会重新渲染,但是不用一一列举组件 name")]),e._v(" "),n("h4",{attrs:{id:"_30-2-全局路由钩子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_30-2-全局路由钩子"}},[e._v("#")]),e._v(" 30.2 全局路由钩子")]),e._v(" "),n("p",[e._v("1.router.beforeEach")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("router.beforeEach((to, from, next) => {\n  console.log('全局前置守卫：beforeEach -- next需要调用') //一般登录拦截用这个,也叫导航钩子守卫\n  if (path === '/login') {\n    next()\n    return\n  }\n  if (token) {\n    next();\n  } \n})\n")])])]),n("p",[e._v("2.router.beforeResolve (v 2.5.0+)\n和beforeEach类似，区别是在导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后，解析守卫就被调用\n即在 beforeEach之后调用")]),e._v(" "),n("p",[e._v("3.router.afterEach\n全局后置钩子\n在所有路由跳转结束的时候调用\n这些钩子不会接受 next 函数也不会改变导航本身")]),e._v(" "),n("h4",{attrs:{id:"_30-3-组件路由钩子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_30-3-组件路由钩子"}},[e._v("#")]),e._v(" 30.3 组件路由钩子")]),e._v(" "),n("p",[e._v("1.beforeRouteEnter\n在渲染该组件的对应路由被确认前调用，用法和参数与router.beforeEach类似，next需要被主动调用\n此时组件实例还未被创建，不能访问this\n可以通过传一个回调给 next来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("beforeRouteEnter (to, from, next) {\n  // 这里还无法访问到组件实例，this === undefined\n  next( vm => {\n    // 通过 `vm` 访问组件实例\n  })\n}\n")])])]),n("p",[e._v("2.beforeRouteUpdate (v 2.2+)\n在当前路由改变，并且该组件被复用时调用，可以通过this访问实例， next需要被主动调用，不能传回调")]),e._v(" "),n("p",[e._v("3.beforeRouteLeave\n导航离开该组件的对应路由时调用，可以访问组件实例 this，next需要被主动调用，不能传回调")]),e._v(" "),n("h4",{attrs:{id:"_30-4-路由模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_30-4-路由模式"}},[e._v("#")]),e._v(" 30.4 路由模式")]),e._v(" "),n("p",[e._v("设置 mode 属性:hash或 history")]),e._v(" "),n("h4",{attrs:{id:"_30-5-vue-router"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_30-5-vue-router"}},[e._v("#")]),e._v(" 30.5 Vue.$router")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("this.$router.push():跳转到不同的url，但这个方法回向history栈添加一个记录，点击后退会返回到上一个页面\nthis.$router.replace():不会有记录\nthis.$router.go(n):n可为正数可为负数。正数返回上一个页面,类似 window.history.go(n)\n")])])]),n("h4",{attrs:{id:"_30-6-vue-route"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_30-6-vue-route"}},[e._v("#")]),e._v(" 30.6 Vue.$route")]),e._v(" "),n("p",[e._v("表示当前跳转的路由对象,属性有:\nname:路由名称\npath:路径\nquery:传参接收值\nparams:传参接收值\nfullPath:完成解析后的 URL，包含查询参数和 hash 的完整路径\nmatched:路由记录副本\nredirectedFrom:如果存在重定向，即为重定向来源的路由的名字")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("this.$route.params.id:获取通过 params 或/:id传参的参数\nthis.$route.query.id:获取通过 query 传参的参数\n")])])]),n("h4",{attrs:{id:"_30-7-router-view-的-key"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_30-7-router-view-的-key"}},[e._v("#")]),e._v(" 30.7 router-view 的 key")]),e._v(" "),n("p",[e._v("场景:由于 Vue 会复用相同组件, 即 /page/1 => /page/2 或者 /page?id=1 => /page?id=2 这类链接跳转时, 将不在执行created, mounted之类的钩子")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<router-view :key="$route.fullpath"></router-view>\n')])])]),n("p",[e._v("这样组件的 created 和 mounted 就都会执行")]),e._v(" "),n("h3",{attrs:{id:"_31-object-freeze"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_31-object-freeze"}},[e._v("#")]),e._v(" 31.Object.freeze")]),e._v(" "),n("p",[e._v("场景:一个长列表数据,一般不会更改,但是vue会做getter和setter的转换\n用法:是ES5新增的特性，可以冻结一个对象，防止对象被修改\n支持:vue 1.0.18+对其提供了支持，对于data或vuex里使用freeze冻结了的对象，vue不会做getter和setter的转换\n注意:冻结只是冻结里面的单个属性,引用地址还是可以更改")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("new Vue({\n    data: {\n        // vue不会对list里的object做getter、setter绑定\n        list: Object.freeze([\n            { value: 1 },\n            { value: 2 }\n        ])\n    },\n    mounted () {\n        // 界面不会有响应,因为单个属性被冻结\n        this.list[0].value = 100;\n\n        // 下面两种做法，界面都会响应\n        this.list = [\n            { value: 100 },\n            { value: 200 }\n        ];\n        this.list = Object.freeze([\n            { value: 100 },\n            { value: 200 }\n        ]);\n    }\n})\n")])])]),n("h3",{attrs:{id:"_32-调试-template"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_32-调试-template"}},[e._v("#")]),e._v(" 32.调试 template")]),e._v(" "),n("p",[e._v("场景:在Vue开发过程中, 经常会遇到template模板渲染时JavaScript变量出错的问题, 此时也许你会通过console.log来进行调试\n这时可以在开发环境挂载一个 log 函数")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// main.js\nVue.prototype.$log = window.console.log;\n\n// 组件内部\n<div>{{$log(info)}}</div>\n")])])]),n("h3",{attrs:{id:"_33-vue-loader-小技巧"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_33-vue-loader-小技巧"}},[e._v("#")]),e._v(" 33.vue-loader 小技巧")]),e._v(" "),n("h4",{attrs:{id:"_33-1-preservewhitespace"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_33-1-preservewhitespace"}},[e._v("#")]),e._v(" 33.1 preserveWhitespace")]),e._v(" "),n("p",[e._v("场景:开发 vue 代码一般会有空格,这个时候打包压缩如果不去掉空格会加大包的体积\n配置preserveWhitespace可以减小包的体积")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("{\n  vue: {\n    preserveWhitespace: false\n  }\n}\n")])])]),n("h4",{attrs:{id:"_33-2-transformtorequire"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_33-2-transformtorequire"}},[e._v("#")]),e._v(" 33.2 transformToRequire")]),e._v(" "),n("p",[e._v("场景:以前在写 Vue 的时候经常会写到这样的代码：把图片提前 require 传给一个变量再传给组件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// page 代码\n<template>\n  <div>\n    <avatar :img-src=\"imgSrc\"></avatar>\n  </div>\n</template>\n<script>\n  export default {\n    created () {\n      this.imgSrc = require('./assets/default-avatar.png')\n    }\n  }\n<\/script>\n")])])]),n("p",[e._v("现在:通过配置 transformToRequire 后，就可以直接配置，这样vue-loader会把对应的属性自动 require 之后传给组件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// vue-cli 2.x在vue-loader.conf.js 默认配置是\ntransformToRequire: {\n    video: ['src', 'poster'],\n    source: 'src',\n    img: 'src',\n    image: 'xlink:href'\n}\n\n// 配置文件,如果是vue-cli2.x 在vue-loader.conf.js里面修改\n  avatar: ['default-src']\n\n// vue-cli 3.x 在vue.config.js\n// vue-cli 3.x 将transformToRequire属性换为了transformAssetUrls\nmodule.exports = {\n  pages,\n  chainWebpack: config => {\n    config\n      .module\n        .rule('vue')\n        .use('vue-loader')\n        .loader('vue-loader')\n        .tap(options => {\n      options.transformAssetUrls = {\n        avatar: 'img-src',\n      }\n      return options;\n      });\n  }\n}\n\n// page 代码可以简化为\n<template>\n  <div>\n    <avatar img-src=\"./assets/default-avatar.png\"></avatar>\n  </div>\n</template>\n")])])]),n("h3",{attrs:{id:"_34-为路径设置别名"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_34-为路径设置别名"}},[e._v("#")]),e._v(" 34.为路径设置别名")]),e._v(" "),n("p",[e._v("1.场景:在开发过程中，我们经常需要引入各种文件，如图片、CSS、JS等，为了避免写很长的相对路径（../），我们可以为不同的目录配置一个别名")]),e._v(" "),n("p",[e._v("2.vue-cli 2.x 配置")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 在 webpack.base.config.js中的 resolve 配置项，在其 alias 中增加别名\nresolve: {\n    extensions: ['.js', '.vue', '.json'],\n    alias: {\n      'vue$': 'vue/dist/vue.esm.js',\n      '@': resolve('src'),\n    }\n  },\n")])])]),n("p",[e._v("3.vue-cli 3.x 配置")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 在根目录下创建vue.config.js\nvar path = require('path')\nfunction resolve (dir) {\n  console.log(__dirname)\n  return path.join(__dirname, dir)\n}\nmodule.exports = {\n  chainWebpack: config => {\n    config.resolve.alias\n      .set(key, value) // key,value自行定义，比如.set('@@', resolve('src/components'))\n  }\n}\n")])])]),n("h3",{attrs:{id:"_35-img-加载失败"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_35-img-加载失败"}},[e._v("#")]),e._v(" 35.img 加载失败")]),e._v(" "),n("p",[e._v("场景:有些时候后台返回图片地址不一定能打开,所以这个时候应该加一张默认图片")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// page 代码\n<img :src="imgUrl" @error="handleError" alt="">\n<script>\nexport default{\n  data(){\n    return{\n      imgUrl:\'\'\n    }\n  },\n  methods:{\n    handleError(e){\n      e.target.src=reqiure(\'图片路径\') //当然如果项目配置了transformToRequire,参考上面 27.2\n    }\n  }\n}\n<\/script>\n')])])]),n("h3",{attrs:{id:"_36-css"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_36-css"}},[e._v("#")]),e._v(" 36.css")]),e._v(" "),n("h4",{attrs:{id:"_36-1-局部样式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_36-1-局部样式"}},[e._v("#")]),e._v(" 36.1 局部样式")]),e._v(" "),n("p",[e._v("1.Vue中style标签的scoped属性表示它的样式只作用于当前模块，是样式私有化.")]),e._v(" "),n("p",[e._v("2.渲染的规则/原理：\n给HTML的DOM节点添加一个 不重复的data属性 来表示 唯一性\n在对应的 CSS选择器 末尾添加一个当前组件的 data属性选择器来私有化样式，如：.demo[data-v-2311c06a]{}\n如果引入 less 或 sass 只会在最后一个元素上设置")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 原始代码\n<template>\n  <div class="demo">\n    <span class="content">\n      Vue.js scoped\n    </span>\n  </div>\n</template>\n\n<style lang="less" scoped>\n  .demo{\n    font-size: 16px;\n    .content{\n      color: red;\n    }\n  }\n</style>\n\n// 浏览器渲染效果\n<div data-v-fed36922>\n  Vue.js scoped\n</div>\n<style type="text/css">\n.demo[data-v-039c5b43] {\n  font-size: 14px;\n}\n.demo .content[data-v-039c5b43] { //.demo 上并没有加 data 属性\n  color: red;\n}\n</style>\n')])])]),n("h4",{attrs:{id:"_36-2-deep-属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_36-2-deep-属性"}},[e._v("#")]),e._v(" 36.2 deep 属性")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 上面样式加一个 /deep/\n<style lang="less" scoped>\n  .demo{\n    font-size: 14px;\n  }\n  .demo /deep/ .content{\n    color: blue;\n  }\n</style>\n\n// 浏览器编译后\n<style type="text/css">\n.demo[data-v-039c5b43] {\n  font-size: 14px;\n}\n.demo[data-v-039c5b43] .content {\n  color: blue;\n}\n</style>\n')])])]),n("h2",{attrs:{id:"v-if和v-for哪个优先级更高"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#v-if和v-for哪个优先级更高"}},[e._v("#")]),e._v(" v-if和v-for哪个优先级更高？")]),e._v(" "),n("p",[e._v("源码中找答案compiler/codegen/index.js   genElement中")]),e._v(" "),n("p",[e._v("可以看到先执行for")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("if (el.staticRoot && !el.staticProcessed) {\n  return genStatic(el, state)\n} else if (el.once && !el.onceProcessed) {\n  return genOnce(el, state)\n} else if (el.for && !el.forProcessed) {\n  return genFor(el, state)\n} else if (el.if && !el.ifProcessed) {\n  return genIf(el, state)\n}\n")])])]),n("p",[e._v("两者同级时，渲染函数如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('(function anonymous( ) { with(this){return _c(\'div\',{attrs:{"id":"demo"}},[_c(\'h1\',[_v("v-for和v-if谁的优先 级高？应该如何正确使用避免性能问题？")]),_v(" "), _l((children),function(child){return (isFolder)?_c(\'p\', [_v(_s(child.title))]):_e()})],2)} })\n\n')])])]),n("p",[e._v("_l包含了isFolder的条件判断\n两者不同级时，渲染函数如下")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('(function anonymous( ) { with(this){return _c(\'div\',{attrs:{"id":"demo"}},[_c(\'h1\',[_v("v-for和v-if谁的优先 级高？应该如何正确使用避免性能问题？")]),_v(" "), (isFolder)?_l((children),function(child){return _c(\'p\', [_v(_s(child.title))])}):_e()],2)} })\n')])])]),n("p",[e._v("结论：")]),e._v(" "),n("ol",[n("li",[e._v("显然v-for优先于v-if被解析（把你是怎么知道的告诉面试官）")]),e._v(" "),n("li",[e._v("如果同时出现，每次渲染都会先执行循环再判断条件，无论如何循环都不可避免，浪费了性能")]),e._v(" "),n("li",[e._v("要避免出现这种情况，则在外层嵌套template，在这一层进行v-if判断，然后在内部进行v-for循环")]),e._v(" "),n("li",[e._v("如果条件出现在循环内部，可通过计算属性提前过滤掉那些不需要显示的项")])]),e._v(" "),n("h2",{attrs:{id:"vue组件data为什么必须是个函数而vue的根实例则没有此限制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue组件data为什么必须是个函数而vue的根实例则没有此限制"}},[e._v("#")]),e._v(" Vue组件data为什么必须是个函数而Vue的根实例则没有此限制？")]),e._v(" "),n("p",[e._v("源码中找答案：src\\core\\instance\\state.js - initData()")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {}\n")])])]),n("p",[e._v("结论:\nVue组件可能存在多个实例，如果使用对象形式定义data，则会导致它们共用一个data对象，那么状态 变更将会影响所有组件实例，这是不合理的；采用函数形式定义，在initData时会将其作为工厂函数返 回全新data对象，有效规避多实例之间状态污染问题。")]),e._v(" "),n("p",[e._v("而在Vue根实例创建过程中则不存在该限制，也 是因为根实例只能有一个，不需要担心这种情况。")]),e._v(" "),n("p",[e._v("mergeData处有判断，组件没vm实例，会走校验data类型，根实例有实例则跳过了校验")])])}),[],!1,null,null,null);t.default=s.exports}}]);