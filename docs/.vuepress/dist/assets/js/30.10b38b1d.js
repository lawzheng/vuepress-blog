(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{386:function(n,t,e){"use strict";e.r(t);var o=e(44),s=Object(o.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"ext动态更改表格列项"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ext动态更改表格列项"}},[n._v("#")]),n._v(" ext动态更改表格列项")]),n._v(" "),e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[n._v("#")]),n._v(" 前言")]),n._v(" "),e("p",[n._v("​\t\t因业务需要，在相同业务的表格中加多一个类型，其中对应表格某些列不一样，下面来讲讲一步步的实现思路。")]),n._v(" "),e("h2",{attrs:{id:"实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[n._v("#")]),n._v(" 实现")]),n._v(" "),e("h3",{attrs:{id:"复制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#复制"}},[n._v("#")]),n._v(" 复制")]),n._v(" "),e("p",[n._v("直接复制表格改改当然比较简单，但是造成了极大的代码冗余，还要修改布局，做页面切换的逻辑。所以不考虑。")]),n._v(" "),e("h3",{attrs:{id:"hidden"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hidden"}},[n._v("#")]),n._v(" hidden")]),n._v(" "),e("p",[n._v("最开始认为使用hidden属性把列隐藏就行了，后来发现在grid中，hidden是初始化的时候隐藏，用户是可以在选项中把隐藏的列显示出来的，所以这条路走不通。")]),n._v(" "),e("h3",{attrs:{id:"columnmodel"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#columnmodel"}},[n._v("#")]),n._v(" ColumnModel")]),n._v(" "),e("p",[n._v("查阅了EXT文档，发现grid有这个属性，可以通过它控制列。")]),n._v(" "),e("p",[n._v("通常我们写列时都是：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("createCols : function () {\n\tthis.columns = [\n\t\txxx,\n\t\txxx\n\t]\n}\n")])])]),e("p",[n._v("ext直接会根据this.columns去生成列。")]),n._v(" "),e("p",[n._v("但是还有一种写法，通过colModel")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("createCols : function () {\n\tthis.colModel = new Ext.grid.ColumnModel({\n\t\t// 添加动态增删列的功能\n        addColumn: function(column, colIndex){\n            var config = this.config;\n            this.config = [];\n            if(typeof colIndex == 'number'){\n                config.splice(colIndex, 0, column);\n            }else{\n                colIndex = config.push(column);\n            }\n            this.setConfig(config);\n            return colIndex;\n        },\n        removeColumn: function(index) {\n            var config = this.config;\n            this.config = [];\n            config.splice(index, 1);\n            this.setConfig(config);\n        },\n        columns : [\n        \txxx,\n        \txxx\n        ]\n    })\n}\n")])])]),e("p",[n._v("根据文档的解释，colModel和columns两个属性都是必须的，猜测源码里是判断两个中存在哪个就用哪个。")]),n._v(" "),e("p",[n._v("通过"),e("code",[n._v("this.config")]),n._v("可以获取到当前列的数组，那么就可以通过修改config达到动态更改列的目的。")]),n._v(" "),e("p",[n._v("在切换列表类型的mgr事件中")]),n._v(" "),e("p",[n._v("获取grid的columnModel，其中就包含了我们写的增删列的功能函数。")]),n._v(" "),e("p",[n._v("删除直接传列的索引")]),n._v(" "),e("p",[n._v("添加传需要添加的列（跟平时写的列一样的格式）和插入位置索引。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('var ColumnModel = grid.getColumnModel();\n\nColumnModel.removeColumn(8);\nColumnModel.addColumn({\n\theader : _("网络随行策略"),\n\twidth:140,\n\tdataIndex : "follow_network"\n}, 8);\n')])])]),e("p",[n._v("列的全部操作结束后，通过grid的fitColumns函数，重新渲染下列，即完成了列的动态改变。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("grid.getView().fitColumns();\n")])])]),e("h3",{attrs:{id:"优化成全局方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优化成全局方法"}},[n._v("#")]),n._v(" 优化成全局方法")]),n._v(" "),e("p",[n._v("上面通过columnModel实现了功能，可是扩展性不强，下面将增删的方法添加到源头去。")]),n._v(" "),e("p",[n._v("查看"),e("code",[n._v("Ext.grid.GridPanel")]),n._v("表格源代码，如下")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("Ext.isArray(this.columns) && (this.colModel = new Ext.grid.ColumnModel(this.columns),\n        delete this.columns)\n")])])]),e("p",[n._v("有columns时就将columns传给Ext.grid.ColumnModel")]),n._v(" "),e("p",[n._v("这也验证了之前的猜想。")]),n._v(" "),e("p",[n._v("可是增删功能是需要附在ColumnModel上的，于是通过"),e("code",[n._v("Ext.override")]),n._v("，给"),e("code",[n._v("Ext.grid.GridPanel")]),n._v("加上addColumn、removeColumn方法，然后再在执行完Ext.grid.GridPanel的initComponent后将addColumn、removeColumn添加进Ext.grid.ColumnModel中 ，这样继承自该grid的页面都拥有了增删列功能。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("(function () {\n    var initComponent = Ext.grid.GridPanel.prototype.initComponent;\n    Ext.override(Ext.grid.GridPanel, {\n        addColumn: function(column, colIndex){\n            var config = this.config;\n            this.config = [];\n            if(typeof colIndex == 'number'){\n                config.splice(colIndex, 0, column);\n            }else{\n                colIndex = config.push(column);\n            }\n            this.setConfig(config);\n            return colIndex;\n        },\n        removeColumn: function(index) {\n            var config = this.config;\n            this.config = [];\n            config.splice(index, 1);\n            this.setConfig(config);\n        },\n        initComponent: function() {\n            initComponent.apply(this, arguments);\n            Ext.override(Ext.grid.ColumnModel, {\n                addColumn: this.addColumn,\n                removeColumn: this.removeColumn\n            })\n        }\n    });\n})();\n")])])]),e("p",[n._v("之前表格的列数据也可以不用ColumnModel的形式，直接用以前的columns形式即可。")]),n._v(" "),e("h2",{attrs:{id:"结语"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#结语"}},[n._v("#")]),n._v(" 结语")]),n._v(" "),e("p",[n._v("俗话说的好：好事多磨。")]),n._v(" "),e("p",[n._v("不断地逼近最优解，才能实现高质量的程序。")])])}),[],!1,null,null,null);t.default=s.exports}}]);